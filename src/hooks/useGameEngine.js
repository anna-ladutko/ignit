import { useState, useEffect, useLayoutEffect, useRef, useCallback } from 'react'
import { GameEngine } from '../game/GameEngine.js'
import { CircuitSimulator } from '../game/circuitSimulator.ts'
import { initializeGameEngineBridge, cleanupGameEngineBridge } from '../utils/gameEngineBridge.ts'

/**
 * useGameEngine - React —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –¥–≤–∏–∂–∫–æ–º
 * –ß–∏—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: React —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–º–∏, GameEngine - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
 */
export const useGameEngine = (level) => {
  const gameEngineRef = useRef(null)
  const circuitSimulatorRef = useRef(null)
  
  // REACT STATE: –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è UI
  const [gameState, setGameState] = useState({
    currentScore: 0, // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏
    bestScore: 0, // –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
    energyUsed: 0,
    gameStatus: 'loading', // loading | playing (—É–±—Ä–∞–ª–∏ auto-complete)
    placedComponents: [], // –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    isSimulating: false,
    levelTime: 0, // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    bestTime: 0, // –≤—Ä–µ–º—è –ª—É—á—à–µ–≥–æ score –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    showSuccessModal: false, // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ success –º–æ–¥–∞–ª
    hasValidSolution: false, // –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ö–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (score > 50)
    attemptCount: 0, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π
    canFinishLevel: false, // –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
    connectionPoints: [] // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  })
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ GameEngine - –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è race condition
  const [gameEngineReady, setGameEngineReady] = useState(false)
  
  // –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–≤–Ω—è
  const levelStartTimeRef = useRef(null)
  const levelTimerRef = useRef(null)
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GameEngine –∫–æ–≥–¥–∞ canvas –≥–æ—Ç–æ–≤
  const initializeGameEngine = useCallback((canvasElement) => {
    if (!canvasElement) {
      return
    }
    
    if (gameEngineRef.current) {
      return // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    }
    
    console.log('üîÑ USEGAMEENGINE: Initializing GameEngine —á–µ—Ä–µ–∑ callback ref...')
    console.log('üîÑ USEGAMEENGINE: Canvas element:', canvasElement, '—Ä–∞–∑–º–µ—Ä—ã:', canvasElement.offsetWidth, 'x', canvasElement.offsetHeight)
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SVG bridge –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º GameEngine
      initializeGameEngineBridge()
      
      // –°–æ–∑–¥–∞—Ç—å CircuitSimulator
      circuitSimulatorRef.current = new CircuitSimulator()
      
      // –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ —Å –∫–æ–ª–ª–±—ç–∫–∞–º–∏
      gameEngineRef.current = new GameEngine(canvasElement, {
        onScoreChange: (score) => {
          setGameState(prev => ({ ...prev, score }))
        },
        
        onComponentPlace: (componentId, position) => {
          console.log(`üîÑ CALLBACK: onComponentPlace –≤—ã–∑–≤–∞–Ω –¥–ª—è componentId="${componentId}"`)
          // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ React state
          setGameState(prev => {
            const updatedComponents = prev.placedComponents.map(comp => {
              if (comp.id === componentId) {
                const updatedComp = { ...comp, position }
                console.log(`üîÑ CALLBACK: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentId}:`, updatedComp)
                console.log(`üîÑ CALLBACK: originalComponentId —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è="${updatedComp.originalComponentId}"`)
                return updatedComp
              }
              return comp
            })
            return {
              ...prev,
              placedComponents: updatedComponents
            }
          })
          // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
          setTimeout(() => autoDetectConnections(), 0)
          // Component placed
        },
        
        onComponentRotate: (componentId, rotation) => {
          // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ React state
          setGameState(prev => ({
            ...prev,
            placedComponents: prev.placedComponents.map(comp =>
              comp.id === componentId 
                ? { ...comp, rotation }
                : comp
            )
          }))
          // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
          setTimeout(() => autoDetectConnections(), 0)
          // Component rotated
        },
        
        onLevelComplete: () => {
          // –£–°–¢–ê–†–ï–õ–û: –≠—Ç–æ—Ç callback –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
          // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ finishLevel()
          console.log('useGameEngine: onLevelComplete called (legacy - now use finishLevel())')
        }
      })
      
      // Expose GameEngine globally for debugging
      window.gameEngine = gameEngineRef.current
      console.log('üîß DEBUG: GameEngine exposed as window.gameEngine')
      
      setGameEngineReady(true)
      
    } catch (error) {
      console.error('‚ùå USEGAMEENGINE: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GameEngine:', error)
      setGameState(prev => ({ ...prev, gameStatus: 'failed' }))
    }
  }, []) // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—É—Å—Ç—ã–µ dependencies –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è - –ñ–î–ï–ú –ì–û–¢–û–í–ù–û–°–¢–ò GameEngine
  useEffect(() => {
    // useEffect triggered
    
    if (!gameEngineReady) {
      return
    }
    
    if (!level) {
      return
    }
    
    if (!gameEngineRef.current) {
      console.error('‚ùå USEGAMEENGINE: GameEngine ready=true –Ω–æ ref=null! –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å.')
      return
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É—Ä–æ–≤–Ω—è
    
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
      const levelData = prepareLevelData(level)
      
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –¥–≤–∏–∂–æ–∫
      gameEngineRef.current.loadLevel(levelData)
      
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤ CircuitSimulator
      if (circuitSimulatorRef.current) {
        circuitSimulatorRef.current.loadLevel(level)
      }
      
      // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —É—Ä–æ–≤–Ω—è
      levelStartTimeRef.current = Date.now()
      console.log('‚è±Ô∏è TIMER: Level timer started at', new Date(levelStartTimeRef.current).toLocaleTimeString())
      
      // –û–±–Ω–æ–≤–∏—Ç—å React state
      // –û–±–Ω–æ–≤–ª—è–µ–º React state
      setGameState(prev => ({
        ...prev,
        placedComponents: levelData.preinstalledComponents || [],
        gameStatus: 'playing',
        currentScore: 0,
        bestScore: 0,
        energyUsed: 0,
        levelTime: 0,
        bestTime: 0,
        hasValidSolution: false,
        attemptCount: 0,
        canFinishLevel: false,
        connectionPoints: []
      }))
      // –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω
      
    } catch (error) {
      console.error('‚ùå USEGAMEENGINE: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è:', error)
      setGameState(prev => ({ ...prev, gameStatus: 'failed' }))
    }
    
  }, [level?.metadata?.level_id, gameEngineReady]) // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
  
  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù: –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–≤–Ω—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö state updates
  // useEffect(() => {
  //   if (gameState.gameStatus === 'playing' && !levelStartTimeRef.current) {
  //     levelStartTimeRef.current = Date.now()
  //     levelTimerRef.current = setInterval(() => {
  //       if (levelStartTimeRef.current) {
  //         const currentTime = Math.floor((Date.now() - levelStartTimeRef.current) / 1000)
  //         setGameState(prev => ({ ...prev, levelTime: currentTime }))
  //       }
  //     }, 1000)
  //   } else if (gameState.gameStatus !== 'playing' && levelTimerRef.current) {
  //     clearInterval(levelTimerRef.current)
  //     levelTimerRef.current = null
  //   }
  // }, [gameState.gameStatus])

  // Cleanup effect - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (gameEngineRef.current) {
        console.log('üßπ USEGAMEENGINE: Cleanup - —É–Ω–∏—á—Ç–æ–∂–∞–µ–º GameEngine')
        gameEngineRef.current = null
      }
      
      if (circuitSimulatorRef.current) {
        console.log('üßπ USEGAMEENGINE: Cleanup - —É–Ω–∏—á—Ç–æ–∂–∞–µ–º CircuitSimulator')
        circuitSimulatorRef.current = null
      }
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
      if (levelTimerRef.current) {
        clearInterval(levelTimerRef.current)
        levelTimerRef.current = null
      }
      levelStartTimeRef.current = null
      
      cleanupGameEngineBridge()
    }
  }, [])
  
  // === BRIDGE –§–£–ù–ö–¶–ò–ò: React ‚Üî CircuitSimulator ===
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å CircuitSimulator
  const syncReactComponentsToSimulator = useCallback(() => {
    console.error('üö® SYNC START - syncReactComponentsToSimulator –≤—ã–∑–≤–∞–Ω–∞!')
    
    if (!circuitSimulatorRef.current || !level) return false
    
    console.log('üåâ BRIDGE: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è React ‚Üí CircuitSimulator')
    
    // 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∑–∏—Ç—å level –¥–ª—è preinstalled –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (SOURCE, TARGET_LED_*)
    circuitSimulatorRef.current.loadLevel(level)
    console.log('üîß BRIDGE: –ó–∞–≥—Ä—É–∂–µ–Ω level —Å preinstalled –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏')
    
    // 2. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    let placedCount = 0
    gameState.placedComponents.forEach(reactComp => {
      if (!reactComp.isPreinstalled) { // –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const success = circuitSimulatorRef.current.placeComponent(
          reactComp.originalComponentId || reactComp.id, 
          reactComp.position,
          reactComp.rotation || 0 // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º rotation!
        )
        if (success) placedCount++
      }
    })
    
    // 3. Debug: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ CircuitSimulator
    const simulator = circuitSimulatorRef.current
    const source = simulator.getSource()
    const targets = simulator.getTargets()
    const placedComponents = simulator.getPlacedComponents()
    console.log('üîç BRIDGE DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ CircuitSimulator:')
    console.log('  SOURCE:', source?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω')
    console.log('  TARGETS:', targets.map(t => t.id) || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    console.log('  PLACED:', placedComponents.map(p => p.id) || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    
    // 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    autoDetectConnections()
    
    console.log(`üåâ BRIDGE: –†–∞–∑–º–µ—â–µ–Ω–æ ${placedCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`)
    return true
  }, [gameState.placedComponents, level])
  
  // Ref –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ gameState
  const gameStateRef = useRef(gameState)
  gameStateRef.current = gameState
  
  // Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ CircuitSimulator
  const findComponentInSimulator = useCallback((simulator, searchId, reactComponent = null) => {
    console.log(`üîç HELPER: –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç searchId="${searchId}"`)
    
    // 1. –ü–æ–∏—Å–∫ preinstalled –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (SOURCE, TARGET_LED_*)
    const source = simulator.getSource()
    console.log(`üîç HELPER: SOURCE: ${source?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`)
    if (source?.id === searchId) {
      console.log(`‚úÖ HELPER: –ù–∞–π–¥–µ–Ω SOURCE —Å ID ${searchId}`)
      return true
    }
    
    const targets = simulator.getTargets()
    console.log(`üîç HELPER: TARGETS: [${targets.map(t => t.id).join(', ')}]`)
    if (targets.some(t => t.id === searchId)) {
      console.log(`‚úÖ HELPER: –ù–∞–π–¥–µ–Ω TARGET —Å ID ${searchId}`)
      return true
    }
    
    // 2. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π searchId)
    const placedComponents = simulator.getPlacedComponents()
    console.log(`üîç HELPER: PLACED COMPONENTS: [${placedComponents.map(p => p.id).join(', ')}]`)
    const foundInPlaced = placedComponents.some(p => p.id === searchId)
    if (foundInPlaced) {
      console.log(`‚úÖ HELPER: –ù–∞–π–¥–µ–Ω PLACED –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å ID ${searchId}`)
    } else {
      console.log(`‚ùå HELPER: –ù–ï –Ω–∞–π–¥–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å ID ${searchId}`)
    }
    
    return foundInPlaced
  }, [])
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–∞–≥–Ω–∏—Ç–Ω—ã–µ —Ç–æ—á–∫–∏
  const autoDetectConnections = useCallback(() => {
    if (!circuitSimulatorRef.current) return
    
    console.log('üîó BRIDGE: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (Variant 2)...')
    
    const simulator = circuitSimulatorRef.current
    const placedComponents = simulator.getPlacedComponents()
    
    // –í–ê–†–ò–ê–ù–¢ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∏ preinstalled, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
    const currentGameState = gameStateRef.current
    const reactPreinstalled = currentGameState.placedComponents.filter(c => c.isPreinstalled)
    const reactUser = currentGameState.placedComponents.filter(c => !c.isPreinstalled)
    
    console.log(`üß≤ React preinstalled –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${reactPreinstalled.length}`)
    console.log(`üß≤ React –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${reactUser.length}`)
    console.log(`üß≤ Simulator placed –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${placedComponents.length}`)
    console.log('üîç DEBUG: –í—Å–µ placedComponents –∏–∑ currentGameState:', currentGameState.placedComponents)
    console.log('üîç DEBUG: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ preinstalled:', reactPreinstalled)
    console.log('üîç DEBUG: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:', reactUser)
    console.log('üîç DEBUG: Simulator placed components:', placedComponents)
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –í–°–ï React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫
    const reactForMagnetic = currentGameState.placedComponents.map(reactComp => ({
      id: reactComp.id,
      position: reactComp.position,
      rotation: reactComp.rotation || 0
    }))
    
    // Simulator –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ React –¥–∞–Ω–Ω—ã–µ
    // const simulatorForMagnetic = placedComponents.map(simComp => ({
    //   id: simComp.id,
    //   position: simComp.position,
    //   rotation: simComp.rotation || 0
    // }))
    
    // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫ (—Ç–æ–ª—å–∫–æ React)
    const allComponents = reactForMagnetic
    
    console.log('üîç DEBUG: allComponents –¥–ª—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫:', allComponents)
    
    // 1. –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–Ω–∏—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const allMagneticPoints = []
    allComponents.forEach(comp => {
      const points = calculateMagneticPoints(comp)
      console.log(`üß≤ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${comp.id} (${comp.position.x}, ${comp.position.y}) rotation=${comp.rotation} -> —Ç–æ—á–∫–∏:`, points)
      allMagneticPoints.push(...points)
    })
    
    console.log('üîç DEBUG: –í—Å–µ –º–∞–≥–Ω–∏—Ç–Ω—ã–µ —Ç–æ—á–∫–∏:', allMagneticPoints)
    
    // 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    const pointGroups = new Map()
    allMagneticPoints.forEach(point => {
      const key = `${point.x},${point.y}`
      if (!pointGroups.has(key)) {
        pointGroups.set(key, [])
      }
      pointGroups.get(key).push(point)
    })
    
    // 3. –°–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (2+ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
    let connectionsCount = 0
    const activeConnectionPoints = [] // –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    
    pointGroups.forEach((group, coordinates) => {
      if (group.length >= 2) {
        console.log(`üß≤ –ú–∞–≥–Ω–∏—Ç–Ω–∞—è —Ç–æ—á–∫–∞ ${coordinates}: ${group.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`)
        
        // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        const [x, y] = coordinates.split(',').map(Number)
        activeConnectionPoints.push({ x, y })
        console.log(`üü¢ –î–û–ë–ê–í–õ–Ø–ï–ú –∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${x}, y=${y}`)
        
        // –°–æ–µ–¥–∏–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π —Å –∫–∞–∂–¥—ã–º –≤ –≥—Ä—É–ø–ø–µ
        for (let i = 0; i < group.length; i++) {
          for (let j = i + 1; j < group.length; j++) {
            const comp1Id = group[i].componentId
            const comp2Id = group[j].componentId
            
            if (comp1Id !== comp2Id) { // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–∞–º–æ—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
              // –ü–æ–ª—É—á–∏—Ç—å React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ originalComponentId
              const comp1React = allComponents.find(c => c.id === comp1Id)
              const comp2React = allComponents.find(c => c.id === comp2Id)
              
              console.log(`üîó MAPPING: comp1Id="${comp1Id}" -> comp1React:`, comp1React ? `FOUND (originalId=${comp1React.originalComponentId})` : 'NOT FOUND')
              console.log(`üîó MAPPING: comp2Id="${comp2Id}" -> comp2React:`, comp2React ? `FOUND (originalId=${comp2React.originalComponentId})` : 'NOT FOUND')
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ CircuitSimulator
              // Fallback: –µ—Å–ª–∏ originalComponentId undefined, –∏–∑–≤–ª–µ—á—å –∏–∑ –¥–ª–∏–Ω–Ω–æ–≥–æ ID
              const extractBaseId = (longId) => {
                // user_R_DIV_1_1755264744372 -> R_DIV_1
                const match = longId.match(/^user_(.+)_\d+$/)
                return match ? match[1] : longId
              }
              
              const searchComp1Id = comp1React && comp1React.originalComponentId 
                ? comp1React.originalComponentId  // user_R_DIV_1_XXX -> R_DIV_1
                : comp1Id.startsWith('user_') ? extractBaseId(comp1Id) : comp1Id  // –¥–ª—è preinstalled –∏–ª–∏ fallback
              const searchComp2Id = comp2React && comp2React.originalComponentId 
                ? comp2React.originalComponentId  // user_R_DIV_2_XXX -> R_DIV_2  
                : comp2Id.startsWith('user_') ? extractBaseId(comp2Id) : comp2Id  // –¥–ª—è preinstalled –∏–ª–∏ fallback
                
              console.log(`üîó SEARCH: –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å comp1="${searchComp1Id}", comp2="${searchComp2Id}" –≤ CircuitSimulator`)
              
              // –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ helper
              const comp1Exists = findComponentInSimulator(simulator, searchComp1Id, comp1React)
              const comp2Exists = findComponentInSimulator(simulator, searchComp2Id, comp2React)
              
              if (comp1Exists && comp2Exists) {
                // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ ID —á—Ç–æ –∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
                const success = simulator.connectComponents(searchComp1Id, searchComp2Id)
                if (success) {
                  connectionsCount++
                  console.log(`‚ö° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${searchComp1Id} ‚Üî ${searchComp2Id}`)
                } else {
                  console.warn(`‚ùå FAILED —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${searchComp1Id} ‚Üî ${searchComp2Id}`)
                }
              } else {
                console.warn(`‚ùå SKIP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${comp1Id} (${comp1Exists}) ‚Üî ${comp2Id} (${comp2Exists}) - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
              }
            }
          }
        }
      }
    })
    
    // –û–±–Ω–æ–≤–∏—Ç—å React state —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    setGameState(prev => ({
      ...prev,
      connectionPoints: activeConnectionPoints
    }))
    
    console.log(`üîó BRIDGE: –°–æ–∑–¥–∞–Ω–æ ${connectionsCount} –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`)
    console.log(`üü¢ VISUAL: –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${activeConnectionPoints.length}`)
  }, []) // –£–±–∏—Ä–∞–µ–º dependency, –∏—Å–ø–æ–ª—å–∑—É–µ–º gameStateRef
  
  // –†–∞—Å—á–µ—Ç –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞
  const calculateMagneticPoints = (component) => {
    const { x, y } = component.position
    const rotation = component.rotation || 0
    
    switch (rotation) {
      case 0:   // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ ‚Üí (–∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
      case 180: // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ ‚Üê (—Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫)
        return [
          { x: x - 40, y, componentId: component.id },
          { x: x + 40, y, componentId: component.id }
        ]
      case 90:  // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ ‚Üì (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞)
      case 270: // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ ‚Üë (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 270¬∞, —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        return [
          { x, y: y - 40, componentId: component.id },
          { x, y: y + 40, componentId: component.id }
        ]
      default:
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${rotation}¬∞`)
        return []
    }
  }
  
  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ window.debugEfficiency –¥–ª—è DebugPanel - –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
  const populateDebugEfficiency = useCallback((simulationResult) => {
    if (!circuitSimulatorRef.current || !level) return
    
    const simulator = circuitSimulatorRef.current
    const source = simulator.getSource()
    const targets = simulator.getTargets()
    const supercapacitor = simulator.getSupercapacitor()
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏ —Å –°–¢–†–û–ì–ò–ú–ò sweet spot –ø—Ä–∞–≤–∏–ª–∞–º–∏
    const targetResults = targets.map(target => {
      const deliveredEnergy = simulationResult.energyDistribution[target.id] || 0
      const isConnected = simulationResult.targetsLit.includes(target.id) || deliveredEnergy > 0
      
      // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ sweet spot –∫–∞–∫ –≤ EnergyCalculator
      let isInSweetSpot = false
      if (target.energyRange && deliveredEnergy > 0) {
        const [minEnergy, maxEnergy] = target.energyRange
        isInSweetSpot = deliveredEnergy >= minEnergy && deliveredEnergy <= maxEnergy
      }
      
      return {
        targetId: target.id,
        deliveredEnergy,
        energyRange: target.energyRange,
        isInSweetSpot,
        usefulEnergy: isInSweetSpot ? deliveredEnergy : 0, // –¢–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏—è –≤ sweet spot –ø–æ–ª–µ–∑–Ω–∞
        heatLoss: isInSweetSpot ? 0 : deliveredEnergy, // –≠–Ω–µ—Ä–≥–∏—è –≤–Ω–µ sweet spot = heat loss
        isConnected
      }
    })
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å efficiency –¢–û–ß–ù–û –∫–∞–∫ –≤ EnergyCalculator
    // Total Useful Energy = —Ç–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏—è –≤ sweet spots + Energy in Supercapacitor
    const usefulEnergyOnTargets = targetResults.reduce((sum, target) => sum + target.usefulEnergy, 0)
    const heatLossFromTargets = targetResults.reduce((sum, target) => sum + target.heatLoss, 0)
    const energyInSupercapacitor = supercapacitor ? supercapacitor.getScore() : 0
    const totalUsefulEnergy = usefulEnergyOnTargets + energyInSupercapacitor
    
    // Efficiency (%) = (Total Useful Energy / Source Energy Output) * 100
    const sourceEnergyOutput = source ? source.getAvailableEnergy() : 120
    const efficiency = sourceEnergyOutput > 0 ? (totalUsefulEnergy / sourceEnergyOutput) * 100 : 0
    
    // –û–∂–∏–¥–∞–µ–º—ã–π score –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const expectedScore = level.solution_data?.optimal_solution?.expected_score || 0
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å window.debugEfficiency —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    window.debugEfficiency = {
      sourceEnergyOutput,
      usefulEnergyOnTargets,
      heatLossFromTargets,
      energyInSupercapacitor,
      totalUsefulEnergy,
      efficiency,
      targetResults,
      expectedScore
    }
    
    console.log('üêõ DEBUG: window.debugEfficiency –∑–∞–ø–æ–ª–Ω–µ–Ω (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞):', window.debugEfficiency)
  }, [level])
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∏–º—É–ª—è—Ü–∏–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
  const updateComponentStatesAfterSimulation = useCallback((simulationResult) => {
    if (!gameEngineRef.current) return
    
    console.log('üåâ BRIDGE: Passing simulation results to GameEngine...')
    
    // Simple pass-through to GameEngine - no React processing
    gameEngineRef.current.updateFromSimulation(simulationResult)
    
    console.log('üåâ BRIDGE: Component states updated by GameEngine')
  }, [])
  
  // === –ò–ì–†–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ React UI) ===
  
  const simulateCircuit = () => {
    console.error('üö® SIMULATE START - —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞!')
    
    if (!gameEngineRef.current || !circuitSimulatorRef.current) return
    
    console.log('üî¨ SIMULATION: –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —Ü–µ–ø–∏')
    
    setGameState(prev => ({ ...prev, isSimulating: true }))
    
    // –†–µ–∞–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å CircuitSimulator
    setTimeout(() => {
      // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å React ‚Üí CircuitSimulator
      const bridgeSuccess = syncReactComponentsToSimulator()
      
      if (!bridgeSuccess) {
        console.error('‚ùå SIMULATION: Bridge sync failed')
        setGameState(prev => ({ ...prev, isSimulating: false }))
        return
      }
      
      // 2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
      const simulationResult = circuitSimulatorRef.current.simulate()
      console.log('üî¨ SIMULATION: –†–µ–∑—É–ª—å—Ç–∞—Ç:', simulationResult)
      
      // 3. –ò–∑–≤–ª–µ—á—å efficiency score
      const currentScore = simulationResult.finalScore || 0
      const efficiency = simulationResult.finalScore || 0 // –í CircuitSimulator finalScore = efficiency
      
      // 4. –ó–∞–ø–æ–ª–Ω–∏—Ç—å window.debugEfficiency –¥–ª—è DebugPanel
      populateDebugEfficiency(simulationResult)
      
      // 5. –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ GameEngine
      updateComponentStatesAfterSimulation(simulationResult)
      
      setGameState(prev => {
        const newBestScore = Math.max(prev.bestScore, currentScore)
        const newHasValidSolution = prev.hasValidSolution || efficiency > 50
        const newAttemptCount = prev.attemptCount + 1
        const newCanFinishLevel = newHasValidSolution
        
        console.log(`üî¨ SIMULATION: Score=${currentScore.toFixed(1)}, Efficiency=${efficiency.toFixed(1)}%`)
        
        return {
          ...prev,
          isSimulating: false,
          currentScore,
          bestScore: newBestScore,
          hasValidSolution: newHasValidSolution,
          attemptCount: newAttemptCount,
          canFinishLevel: newCanFinishLevel,
          // –í–∞–∂–Ω–æ: –ù–ï –º–µ–Ω—è–µ–º gameStatus –Ω–∞ 'complete' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
          gameStatus: 'playing'
        }
      })
    }, 2000) // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX
  }
  
  const resetLevel = () => {
    if (!gameEngineRef.current || !level) return
    
    // Resetting level
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —É—Ä–æ–≤–Ω—è
    levelStartTimeRef.current = Date.now()
    
    const levelData = prepareLevelData(level)
    gameEngineRef.current.loadLevel(levelData)
    
    setGameState(prev => ({
      ...prev,
      placedComponents: levelData.preinstalledComponents || [],
      gameStatus: 'playing',
      currentScore: 0,
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º bestScore –∏ bestTime –ø—Ä–∏ reset
      energyUsed: 0,
      levelTime: 0,
      isSimulating: false,
      hasValidSolution: false,
      attemptCount: 0,
      canFinishLevel: false,
      connectionPoints: []
    }))
  }
  
  const addComponentFromPalette = (componentId) => {
    if (!gameEngineRef.current || !level) return
    
    console.log(`üéØ PALETTE: addComponentFromPalette –≤—ã–∑–≤–∞–Ω–∞ —Å componentId="${componentId}"`)
    
    // –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —É—Ä–æ–≤–Ω–µ
    const componentDef = level.circuit_definition.available_components.find(c => c.id === componentId)
    if (!componentDef) {
      console.error('useGameEngine: Component definition not found for ID:', componentId)
      return
    }
    
    // –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    const autoPosition = findNextAvailablePosition(gameState.placedComponents)
    
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const newComponent = {
      id: `user_${componentId}_${Date.now()}`,
      type: componentDef.type,
      position: autoPosition, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
      rotation: 0,
      isPreinstalled: false,
      originalComponentId: componentId, // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤ –ø–∞–ª–∏—Ç—Ä–µ
      properties: {
        resistance: componentDef.resistance,
        capacitance: componentDef.capacitance,
        inductance: componentDef.inductance,
        voltage: componentDef.voltage
      }
    }
    
    console.log(`üéØ PALETTE: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:`, newComponent)
    console.log(`üéØ PALETTE: originalComponentId="${newComponent.originalComponentId}"`)
    
    gameEngineRef.current.addComponent(newComponent)
    
    setGameState(prev => {
      const updatedComponents = [...prev.placedComponents, newComponent]
      console.log(`üéØ PALETTE: –û–±–Ω–æ–≤–ª—è–µ–º React state. –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ:`)
      const addedComponent = updatedComponents[updatedComponents.length - 1]
      console.log(`üéØ PALETTE: –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ state:`, addedComponent)
      console.log(`üéØ PALETTE: originalComponentId –≤ state="${addedComponent.originalComponentId}"`)
      
      return {
        ...prev,
        placedComponents: updatedComponents
      }
    })
    
    // Component added from palette
  }
  
  // –ù–û–í–û–ï: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–æ–º
  const finishLevel = () => {
    if (!gameState.canFinishLevel) {
      // Cannot finish level
      return
    }
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    const finalTime = levelStartTimeRef.current 
      ? Math.floor((Date.now() - levelStartTimeRef.current) / 1000)
      : 0
      
    console.log('‚è±Ô∏è TIMER: Level finished!')
    console.log('‚è±Ô∏è TIMER: Final time:', finalTime, 'seconds')
    console.log('‚è±Ô∏è TIMER: Current score:', gameState.currentScore)
    console.log('‚è±Ô∏è TIMER: Previous best score:', gameState.bestScore)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ä–µ–∫–æ—Ä–¥–æ–≤
    setGameState(prev => {
      const isNewRecord = prev.currentScore > prev.bestScore
      
      console.log('‚è±Ô∏è TIMER: Is new record?', isNewRecord)
      console.log('‚è±Ô∏è TIMER: Will save - bestScore:', isNewRecord ? prev.currentScore : prev.bestScore, 'bestTime:', isNewRecord ? finalTime : prev.bestTime)
      
      return {
        ...prev,
        gameStatus: 'complete', // –¢–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
        levelTime: finalTime,
        bestScore: isNewRecord ? prev.currentScore : prev.bestScore,
        bestTime: isNewRecord ? finalTime : prev.bestTime,
        showSuccessModal: true
      }
    })
    
    // Level finished by player
  }

  // Actions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è success modal
  const hideSuccessModal = () => {
    setGameState(prev => ({ ...prev, showSuccessModal: false }))
  }
  
  const resetForNextLevel = () => {
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    levelStartTimeRef.current = null
    
    setGameState(prev => ({
      ...prev,
      gameStatus: 'loading',
      currentScore: 0,
      bestScore: 0,
      energyUsed: 0,
      levelTime: 0,
      bestTime: 0,
      showSuccessModal: false,
      hasValidSolution: false,
      attemptCount: 0,
      canFinishLevel: false,
      placedComponents: [],
      isSimulating: false,
      connectionPoints: []
    }))
    
    // Reset for next level
  }

  return {
    gameState,
    gameEngine: gameEngineRef.current,
    initializeGameEngine, // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    actions: {
      simulateCircuit,
      resetLevel,
      addComponentFromPalette,
      finishLevel, // –ù–û–í–û–ï: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      hideSuccessModal,
      resetForNextLevel
    }
  }
}

// === –£–¢–ò–õ–ò–¢–´ ===

function prepareLevelData(level) {
  const preinstalledComponents = []
  
  // –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (level.circuit_definition.source) {
    const source = level.circuit_definition.source
    preinstalledComponents.push({
      id: source.id,
      type: 'voltage_source',
      position: { x: 80, y: 200 }, // –ü—Ä–∞–≤–∏–ª–æ: x –≤—Å–µ–≥–¥–∞ 80, y –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 200
      rotation: 0,
      isPreinstalled: true,
      originalComponentId: source.id, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID mapping
      properties: {
        voltage: source.voltage,
        energyOutput: source.energy_output
      }
    })
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏ (LED –ª–∞–º–ø–æ—á–∫–∏) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ —Å —à–∞–≥–æ–º 40px
  level.circuit_definition.targets.forEach((target, index) => {
    preinstalledComponents.push({
      id: target.id,
      type: 'led',
      position: { x: 80, y: 240 + (index * 40) }, // –ü—Ä–∞–≤–∏–ª–æ: x –≤—Å–µ–≥–¥–∞ 80, y: 240, 280, 320, 360...
      rotation: 0,
      isPreinstalled: true,
      originalComponentId: target.id, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID mapping
      properties: {
        energyRange: target.energy_range
      }
    })
  })
  
  return {
    preinstalledComponents,
    availableComponents: level.circuit_definition.available_components
  }
}

// –°—Ç–∞—Ä–∞—è –∑–∞–≥–ª—É—à–∫–∞ calculateScore —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è CircuitSimulator

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

/**
 * –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
 * –ù–∞—á–∏–Ω–∞–µ—Ç —Å x: 240, y: 120 –∏ –∏–¥–µ—Ç –≤–Ω–∏–∑ —Å —à–∞–≥–æ–º 40px: 160, 200, 240, 280...
 */
function findNextAvailablePosition(placedComponents) {
  const START_X = 240
  const START_Y = 120
  const STEP_Y = 40 // –®–∞–≥ —Å–µ—Ç–∫–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  const MAX_ATTEMPTS = 20 // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  
  for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt++) {
    const candidatePosition = {
      x: START_X,
      y: START_Y + (attempt * STEP_Y)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è
    const isOccupied = placedComponents.some(component => {
      const dx = Math.abs(component.position.x - candidatePosition.x)
      const dy = Math.abs(component.position.y - candidatePosition.y)
      return dx < 20 && dy < 20 // –¢–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞ —á—Ç–æ –∏ –≤ GameEngine.isPositionOccupied
    })
    
    if (!isOccupied) {
      // Position found
      return candidatePosition
    }
    
    // Position occupied
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–Ω—è—Ç—ã, –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
  const fallbackPosition = { x: START_X + 40, y: START_Y }
  // Using fallback position
  return fallbackPosition
}