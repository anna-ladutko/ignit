import { useState, useEffect, useLayoutEffect, useRef } from 'react'
import { GameEngine } from '../game/GameEngine.js'
import { initializeGameEngineBridge, cleanupGameEngineBridge } from '../utils/gameEngineBridge.ts'

/**
 * useGameEngine - React —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –¥–≤–∏–∂–∫–æ–º
 * –ß–∏—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: React —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–º–∏, GameEngine - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
 */
export const useGameEngine = (level) => {
  const gameEngineRef = useRef(null)
  
  // REACT STATE: –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è UI
  const [gameState, setGameState] = useState({
    score: 0,
    energyUsed: 0,
    gameStatus: 'loading', // loading | playing | complete | failed
    placedComponents: [], // –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    isSimulating: false
  })
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ GameEngine - –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è race condition
  const [gameEngineReady, setGameEngineReady] = useState(false)
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GameEngine –∫–æ–≥–¥–∞ canvas –≥–æ—Ç–æ–≤
  const initializeGameEngine = (canvasElement) => {
    if (!canvasElement) {
      console.log('‚ùå USEGAMEENGINE: initializeGameEngine –ø–æ–ª—É—á–∏–ª null element')
      return
    }
    
    if (gameEngineRef.current) {
      console.log('‚ùå USEGAMEENGINE: GameEngine —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return
    }
    
    console.log('üîÑ USEGAMEENGINE: Initializing GameEngine —á–µ—Ä–µ–∑ callback ref...')
    console.log('üîÑ USEGAMEENGINE: Canvas element:', canvasElement, '—Ä–∞–∑–º–µ—Ä—ã:', canvasElement.offsetWidth, 'x', canvasElement.offsetHeight)
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SVG bridge –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º GameEngine
      initializeGameEngineBridge()
      
      // –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ —Å –∫–æ–ª–ª–±—ç–∫–∞–º–∏
      gameEngineRef.current = new GameEngine(canvasElement, {
        onScoreChange: (score) => {
          setGameState(prev => ({ ...prev, score }))
        },
        
        onComponentPlace: (componentId, position) => {
          // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ React state
          setGameState(prev => ({
            ...prev,
            placedComponents: prev.placedComponents.map(comp =>
              comp.id === componentId 
                ? { ...comp, position }
                : comp
            )
          }))
          console.log('useGameEngine: Component placed', componentId, position)
        },
        
        onComponentRotate: (componentId, rotation) => {
          // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ React state
          setGameState(prev => ({
            ...prev,
            placedComponents: prev.placedComponents.map(comp =>
              comp.id === componentId 
                ? { ...comp, rotation }
                : comp
            )
          }))
          console.log('useGameEngine: Component rotated', componentId, rotation)
        },
        
        onLevelComplete: () => {
          setGameState(prev => ({ ...prev, gameStatus: 'complete' }))
          console.log('useGameEngine: Level completed!')
        }
      })
      
      console.log('‚úÖ USEGAMEENGINE: GameEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ callback ref!')
      setGameEngineReady(true) // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å GameEngine
      
    } catch (error) {
      console.error('‚ùå USEGAMEENGINE: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GameEngine:', error)
      setGameState(prev => ({ ...prev, gameStatus: 'failed' }))
    }
  }
  
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è - –ñ–î–ï–ú –ì–û–¢–û–í–ù–û–°–¢–ò GameEngine
  useEffect(() => {
    console.log('üîÑ USEGAMEENGINE: useEffect triggered. gameEngineReady:', gameEngineReady, 'level:', !!level)
    
    if (!gameEngineReady) {
      console.log('‚ùå USEGAMEENGINE: GameEngine –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...')
      return
    }
    
    if (!level) {
      console.log('‚ùå USEGAMEENGINE: Level –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∂–¥–µ–º...')
      return
    }
    
    if (!gameEngineRef.current) {
      console.error('‚ùå USEGAMEENGINE: GameEngine ready=true –Ω–æ ref=null! –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å.')
      return
    }
    
    console.log('‚úÖ USEGAMEENGINE: GameEngine –≥–æ—Ç–æ–≤ –ò level –∑–∞–≥—Ä—É–∂–µ–Ω - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É—Ä–æ–≤–Ω—è:', level.metadata)
    
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
      console.log('üîÑ USEGAMEENGINE: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è...')
      const levelData = prepareLevelData(level)
      console.log('‚úÖ USEGAMEENGINE: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:', levelData)
      
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –¥–≤–∏–∂–æ–∫
      console.log('üîÑ USEGAMEENGINE: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ GameEngine...')
      gameEngineRef.current.loadLevel(levelData)
      console.log('‚úÖ USEGAMEENGINE: GameEngine.loadLevel() –≤—ã–ø–æ–ª–Ω–µ–Ω')
      
      // –û–±–Ω–æ–≤–∏—Ç—å React state
      console.log('üîÑ USEGAMEENGINE: –û–±–Ω–æ–≤–ª—è–µ–º React state –Ω–∞ playing...')
      setGameState(prev => ({
        ...prev,
        placedComponents: levelData.preinstalledComponents || [],
        gameStatus: 'playing',
        score: 0,
        energyUsed: 0
      }))
      console.log('‚úÖ USEGAMEENGINE: –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, gameStatus = playing')
      
    } catch (error) {
      console.error('‚ùå USEGAMEENGINE: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è:', error)
      setGameState(prev => ({ ...prev, gameStatus: 'failed' }))
    }
    
  }, [level, gameEngineReady]) // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–∏–ª–∏ gameEngineReady –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  
  // Cleanup effect - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (gameEngineRef.current) {
        console.log('üßπ USEGAMEENGINE: Cleanup - —É–Ω–∏—á—Ç–æ–∂–∞–µ–º GameEngine')
        gameEngineRef.current = null
      }
      cleanupGameEngineBridge()
    }
  }, [])
  
  // === –ò–ì–†–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ React UI) ===
  
  const simulateCircuit = () => {
    if (!gameEngineRef.current) return
    
    console.log('useGameEngine: Starting simulation')
    
    setGameState(prev => ({ ...prev, isSimulating: true }))
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–ø–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    setTimeout(() => {
      const score = calculateScore(gameState.placedComponents)
      setGameState(prev => ({
        ...prev,
        isSimulating: false,
        score,
        gameStatus: score > 50 ? 'complete' : 'playing'
      }))
    }, 2000)
  }
  
  const resetLevel = () => {
    if (!gameEngineRef.current || !level) return
    
    console.log('useGameEngine: Resetting level')
    
    const levelData = prepareLevelData(level)
    gameEngineRef.current.loadLevel(levelData)
    
    setGameState(prev => ({
      ...prev,
      placedComponents: levelData.preinstalledComponents || [],
      gameStatus: 'playing',
      score: 0,
      energyUsed: 0,
      isSimulating: false
    }))
  }
  
  const addComponentFromPalette = (componentId) => {
    if (!gameEngineRef.current || !level) return
    
    // –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —É—Ä–æ–≤–Ω–µ
    const componentDef = level.circuit_definition.available_components.find(c => c.id === componentId)
    if (!componentDef) {
      console.error('useGameEngine: Component definition not found for ID:', componentId)
      return
    }
    
    // –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    const autoPosition = findNextAvailablePosition(gameState.placedComponents)
    
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const newComponent = {
      id: `user_${componentId}_${Date.now()}`,
      type: componentDef.type,
      position: autoPosition, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
      rotation: 0,
      isPreinstalled: false,
      originalComponentId: componentId, // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤ –ø–∞–ª–∏—Ç—Ä–µ
      properties: {
        resistance: componentDef.resistance,
        capacitance: componentDef.capacitance,
        inductance: componentDef.inductance,
        voltage: componentDef.voltage
      }
    }
    
    gameEngineRef.current.addComponent(newComponent)
    
    setGameState(prev => ({
      ...prev,
      placedComponents: [...prev.placedComponents, newComponent]
    }))
    
    console.log('useGameEngine: Added component from palette', {componentId, autoPosition, newComponent})
  }
  
  return {
    gameState,
    gameEngine: gameEngineRef.current,
    initializeGameEngine, // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    actions: {
      simulateCircuit,
      resetLevel,
      addComponentFromPalette
    }
  }
}

// === –£–¢–ò–õ–ò–¢–´ ===

function prepareLevelData(level) {
  const preinstalledComponents = []
  
  // –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (level.circuit_definition.source) {
    const source = level.circuit_definition.source
    preinstalledComponents.push({
      id: source.id,
      type: 'voltage_source',
      position: { x: 80, y: 200 }, // –ü—Ä–∞–≤–∏–ª–æ: x –≤—Å–µ–≥–¥–∞ 80, y –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 200
      rotation: 0,
      isPreinstalled: true,
      properties: {
        voltage: source.voltage,
        energyOutput: source.energy_output
      }
    })
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏ (LED –ª–∞–º–ø–æ—á–∫–∏) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ —Å —à–∞–≥–æ–º 40px
  level.circuit_definition.targets.forEach((target, index) => {
    preinstalledComponents.push({
      id: target.id,
      type: 'led',
      position: { x: 80, y: 240 + (index * 40) }, // –ü—Ä–∞–≤–∏–ª–æ: x –≤—Å–µ–≥–¥–∞ 80, y: 240, 280, 320, 360...
      rotation: 0,
      isPreinstalled: true,
      properties: {
        energyRange: target.energy_range
      }
    })
  })
  
  return {
    preinstalledComponents,
    availableComponents: level.circuit_definition.available_components
  }
}

function calculateScore(components) {
  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
  const userComponents = components.filter(c => !c.isPreinstalled)
  return userComponents.length * 10 + Math.floor(Math.random() * 50)
}

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

/**
 * –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
 * –ù–∞—á–∏–Ω–∞–µ—Ç —Å x: 240, y: 120 –∏ –∏–¥–µ—Ç –≤–Ω–∏–∑ —Å —à–∞–≥–æ–º 40px: 160, 200, 240, 280...
 */
function findNextAvailablePosition(placedComponents) {
  const START_X = 240
  const START_Y = 120
  const STEP_Y = 40 // –®–∞–≥ —Å–µ—Ç–∫–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  const MAX_ATTEMPTS = 20 // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  
  for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt++) {
    const candidatePosition = {
      x: START_X,
      y: START_Y + (attempt * STEP_Y)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è
    const isOccupied = placedComponents.some(component => {
      const dx = Math.abs(component.position.x - candidatePosition.x)
      const dy = Math.abs(component.position.y - candidatePosition.y)
      return dx < 20 && dy < 20 // –¢–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞ —á—Ç–æ –∏ –≤ GameEngine.isPositionOccupied
    })
    
    if (!isOccupied) {
      console.log(`findNextAvailablePosition: Found free position at attempt ${attempt}:`, candidatePosition)
      return candidatePosition
    }
    
    console.log(`findNextAvailablePosition: Position occupied at attempt ${attempt}:`, candidatePosition)
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–Ω—è—Ç—ã, –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
  const fallbackPosition = { x: START_X + 40, y: START_Y }
  console.warn('findNextAvailablePosition: All default positions occupied, using fallback:', fallbackPosition)
  return fallbackPosition
}