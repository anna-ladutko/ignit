import React, { useRef, useCallback } from 'react'
import { Box, useTheme } from '@mui/material'
import type { Level } from '../../../types'
import { useGameEngine } from '../../../hooks/useGameEngine.js'
import { TopGameBar } from './GameUI/TopGameBar'
import { ComponentPalette } from './GameUI/ComponentPalette'
import { GameControls } from './GameUI/GameControls'

/**
 * GameScreen - –ß–∏—Å—Ç—ã–π UI Shell
 * React —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ UI —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏
 * –í—Å—è –∏–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ GameEngine (Vanilla JS)
 */

interface GameScreenProps {
  level: Level
  onBackToMain: () => void
  onNextLevel?: () => void
}

export const GameScreen: React.FC<GameScreenProps> = ({
  level,
  onBackToMain,
  onNextLevel: _onNextLevel,
}) => {
  const theme = useTheme()
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ —á–µ—Ä–µ–∑ —Ö—É–∫
  const { gameState, actions, initializeGameEngine } = useGameEngine(level)
  
  // Callback ref - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç GameEngine –∫–æ–≥–¥–∞ canvas –≥–æ—Ç–æ–≤
  const canvasRef = useCallback((canvasElement: HTMLDivElement | null) => {
    console.log('üîÑ GAMESCREEN: Canvas ref callback triggered. Element:', !!canvasElement)
    
    if (canvasElement) {
      console.log('‚úÖ GAMESCREEN: Canvas —ç–ª–µ–º–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GameEngine...')
      initializeGameEngine(canvasElement)
    } else {
      console.log('‚ùå GAMESCREEN: Canvas —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω')
    }
  }, [initializeGameEngine])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI —Å–æ–±—ã—Ç–∏–π - –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ GameEngine
  const handleSimulate = () => {
    actions.simulateCircuit()
  }
  
  const handleReset = () => {
    actions.resetLevel()
  }

  const handleComponentFromPalette = (componentType: string) => {
    actions.addComponentFromPalette(componentType)
  }

  // Failed state - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
  if (gameState.gameStatus === 'failed') {
    return (
      <Box
        sx={{
          minHeight: '100vh',
          backgroundColor: 'background.default',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <Box
          sx={{
            color: theme.palette.error.main,
            fontSize: '24px',
            textAlign: 'center',
          }}
        >
          ‚ùå Level Failed to Load
          <Box sx={{ fontSize: '14px', color: 'text.secondary', mt: 1 }}>
            Check console for details
          </Box>
        </Box>
      </Box>
    )
  }

  return (
    <Box
      sx={{
        width: '100%',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        position: 'relative',
      }}
    >
      {/* Top Game Bar - –°—Ç–∞—Ç–∏—á–Ω—ã–π UI */}
      <TopGameBar
        level={level}
        score={gameState.score}
        energyUsed={gameState.energyUsed}
        gameStatus={gameState.gameStatus}
        onBackClick={onBackToMain}
      />

      {/* Main Game Area */}
      <Box
        sx={{
          flex: 1,
          display: 'flex',
          flexDirection: 'column',
          position: 'relative',
        }}
      >
        {/* Game Canvas - –í–°–ï–ì–î–ê –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è callback ref */}
        <Box sx={{ flex: 1, position: 'relative' }}>
          <div
            ref={canvasRef}
            id="game-canvas"
            data-testid="game-canvas"
            style={{
              width: '100%',
              height: '100%',
              backgroundColor: '#202221',
              position: 'relative',
              overflow: 'hidden'
            }}
          />
          
          {/* Loading Overlay - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö canvas */}
          {gameState.gameStatus === 'loading' && (
            <Box
              sx={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: 'rgba(32, 34, 33, 0.9)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                zIndex: 1000,
              }}
            >
              <Box
                sx={{
                  color: theme.palette.electronic.primary,
                  fontSize: '24px',
                  textAlign: 'center',
                }}
              >
                Loading Level...
                <Box sx={{ fontSize: '14px', color: 'text.secondary', mt: 1 }}>
                  Initializing GameEngine...
                </Box>
              </Box>
            </Box>
          )}
        </Box>

        {/* Component Palette - –°—Ç–∞—Ç–∏—á–Ω—ã–π UI */}
        <ComponentPalette
          level={level}
          placedComponents={gameState.placedComponents}
          selectedComponent={null}
          draggedComponent={null}
          onComponentSelect={handleComponentFromPalette}
        />

        {/* Game Controls - –°—Ç–∞—Ç–∏—á–Ω—ã–π UI */}
        <GameControls
          gameStatus={gameState.gameStatus}
          onSimulate={handleSimulate}
          onReset={handleReset}
          onHint={() => {}}
          canSimulate={gameState.placedComponents.length > 0}
        />
      </Box>
    </Box>
  )
}

export default GameScreen