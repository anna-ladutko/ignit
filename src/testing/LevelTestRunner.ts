/**
 * LevelTestRunner
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –≤–∏–¥—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
 */

import { LevelDuplicateChecker } from './LevelDuplicateChecker'
import { EnergyValidationSuite } from './EnergyValidationSuite'
import { SweetSpotValidator } from './SweetSpotValidator'
import { levelManager } from '../services/LevelManager'
import type { Level } from '../types'
import type { LevelTestSuite, LevelValidationReport, TestResult } from './types'

export class LevelTestRunner {
  private duplicateChecker: LevelDuplicateChecker
  private energyValidator: EnergyValidationSuite
  private sweetSpotValidator: SweetSpotValidator
  private isRunning = false

  constructor() {
    this.duplicateChecker = new LevelDuplicateChecker()
    this.energyValidator = new EnergyValidationSuite()
    this.sweetSpotValidator = new SweetSpotValidator()
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
   */
  async runFullValidation(): Promise<LevelValidationReport[]> {
    if (this.isRunning) {
      throw new Error('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
    }

    this.isRunning = true
    const reports: LevelValidationReport[] = []

    try {
      console.log('üöÄ LEVEL_TEST_RUNNER: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π...')

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
      const availableLevels = levelManager.getAvailableLevels()
      console.log(`üìä LEVEL_TEST_RUNNER: –ù–∞–π–¥–µ–Ω–æ ${availableLevels.length} —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`)

      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const loadedLevels: Level[] = []
      for (const levelInfo of availableLevels) {
        try {
          const level = await levelManager.loadLevelByOrder(levelInfo.id)
          if (level) {
            loadedLevels.push(level)
            this.duplicateChecker.addLevel(level)
            console.log(`‚úÖ LEVEL_TEST_RUNNER: –ó–∞–≥—Ä—É–∂–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${levelInfo.id}`)
          } else {
            console.warn(`‚ö†Ô∏è LEVEL_TEST_RUNNER: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ${levelInfo.id}`)
          }
        } catch (error) {
          console.error(`‚ùå LEVEL_TEST_RUNNER: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è ${levelInfo.id}:`, error)
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
      for (const level of loadedLevels) {
        try {
          console.log(`üîç LEVEL_TEST_RUNNER: –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å ${level.registryOrder}...`)
          const report = await this.validateSingleLevel(level)
          reports.push(report)
        } catch (error) {
          console.error(`‚ùå LEVEL_TEST_RUNNER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Ä–æ–≤–Ω—è:`, error)
          
          // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
          reports.push(this.createErrorReport(level, error))
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.generateSummaryStats(reports)

    } finally {
      this.isRunning = false
    }

    console.log(`üèÅ LEVEL_TEST_RUNNER: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${reports.length} —É—Ä–æ–≤–Ω–µ–π`)
    return reports
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   */
  async validateSingleLevel(level: Level): Promise<LevelValidationReport> {
    const startTime = Date.now()
    const levelId = level.registryOrder?.toString() || level.metadata.level_id

    console.log(`üî¨ LEVEL_TEST_RUNNER: –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è ${levelId}...`)

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testSuite: LevelTestSuite = {
      levelId: level.metadata.level_id,
      levelOrder: level.registryOrder || 0,
      tests: {
        uniqueness: [],
        energyValidation: [],
        sweetSpotValidation: []
      },
      summary: {
        totalTests: 0,
        passed: 0,
        failed: 0,
        warnings: 0,
        errors: 0
      }
    }

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      console.log(`üîç LEVEL_TEST_RUNNER: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è ${levelId}...`)
      testSuite.tests.uniqueness = this.duplicateChecker.checkForDuplicates(level)

      // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
      console.log(`‚ö° LEVEL_TEST_RUNNER: –í–∞–ª–∏–¥–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã —É—Ä–æ–≤–Ω—è ${levelId}...`)
      testSuite.tests.energyValidation = this.energyValidator.validateLevel(level)

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Sweet Spot –ø—Ä–∞–≤–∏–ª
      console.log(`üéØ LEVEL_TEST_RUNNER: –ü—Ä–æ–≤–µ—Ä—è–µ–º Sweet Spot –ø—Ä–∞–≤–∏–ª–∞ —É—Ä–æ–≤–Ω—è ${levelId}...`)
      testSuite.tests.sweetSpotValidation = this.sweetSpotValidator.validateSweetSpotRules(level)

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.calculateTestSummary(testSuite)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const overallStatus = this.determineOverallStatus(testSuite)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = this.generateRecommendations(testSuite)

      const endTime = Date.now()
      const duration = endTime - startTime

      console.log(`‚úÖ LEVEL_TEST_RUNNER: –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è ${levelId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`)
      console.log(`üìä LEVEL_TEST_RUNNER: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${testSuite.summary.passed}/${testSuite.summary.totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏, —Å—Ç–∞—Ç—É—Å: ${overallStatus}`)

      return {
        levelOrder: level.registryOrder || 0,
        levelId: level.metadata.level_id,
        timestamp: new Date().toISOString(),
        testSuites: testSuite,
        recommendations,
        overallStatus
      }

    } catch (error) {
      console.error(`‚ùå LEVEL_TEST_RUNNER: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è ${levelId}:`, error)
      throw error
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞
   */
  async runQuickCheck(levelOrder: number, checkType: 'duplicates' | 'energy' | 'sweetspot' | 'all'): Promise<TestResult[]> {
    console.log(`‚ö° LEVEL_TEST_RUNNER: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ${checkType} –¥–ª—è —É—Ä–æ–≤–Ω—è ${levelOrder}`)

    const level = await levelManager.loadLevelByOrder(levelOrder)
    if (!level) {
      return [{
        passed: false,
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ${levelOrder}`,
        severity: 'critical'
      }]
    }

    switch (checkType) {
      case 'duplicates':
        // –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const allLevels = await this.loadAllLevelsForComparison()
        allLevels.forEach(l => this.duplicateChecker.addLevel(l))
        return this.duplicateChecker.checkForDuplicates(level)

      case 'energy':
        return this.energyValidator.validateLevel(level)

      case 'sweetspot':
        return this.sweetSpotValidator.validateSweetSpotRules(level)

      case 'all':
        const allResults: TestResult[] = []
        allResults.push(...await this.runQuickCheck(levelOrder, 'duplicates'))
        allResults.push(...await this.runQuickCheck(levelOrder, 'energy'))
        allResults.push(...await this.runQuickCheck(levelOrder, 'sweetspot'))
        return allResults

      default:
        return [{
          passed: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: ${checkType}`,
          severity: 'error'
        }]
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  getTestingStats() {
    return {
      isRunning: this.isRunning,
      duplicateChecker: this.duplicateChecker.getStats()
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  reset(): void {
    this.duplicateChecker.clear()
    this.isRunning = false
    console.log('üóëÔ∏è LEVEL_TEST_RUNNER: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–æ')
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private calculateTestSummary(testSuite: LevelTestSuite): void {
    const allTests = [
      ...testSuite.tests.uniqueness,
      ...testSuite.tests.energyValidation,
      ...testSuite.tests.sweetSpotValidation
    ]

    testSuite.summary.totalTests = allTests.length
    testSuite.summary.passed = allTests.filter(t => t.passed).length
    testSuite.summary.failed = allTests.filter(t => !t.passed).length
    testSuite.summary.warnings = allTests.filter(t => t.severity === 'warning').length
    testSuite.summary.errors = allTests.filter(t => t.severity === 'error' || t.severity === 'critical').length
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private determineOverallStatus(testSuite: LevelTestSuite): 'passed' | 'warning' | 'failed' | 'critical' {
    const allTests = [
      ...testSuite.tests.uniqueness,
      ...testSuite.tests.energyValidation,
      ...testSuite.tests.sweetSpotValidation
    ]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if (allTests.some(t => t.severity === 'critical' && !t.passed)) {
      return 'critical'
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    if (allTests.some(t => t.severity === 'error' && !t.passed)) {
      return 'failed'
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (allTests.some(t => t.severity === 'warning')) {
      return 'warning'
    }

    return 'passed'
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private generateRecommendations(testSuite: LevelTestSuite): string[] {
    const recommendations: string[] = []
    const allTests = [
      ...testSuite.tests.uniqueness,
      ...testSuite.tests.energyValidation,
      ...testSuite.tests.sweetSpotValidation
    ]

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
    const duplicateErrors = testSuite.tests.uniqueness.filter(t => !t.passed)
    if (duplicateErrors.length > 0) {
      recommendations.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Ä–æ–≤–Ω–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Prometheus Studio –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
    }

    const energyErrors = testSuite.tests.energyValidation.filter(t => t.severity === 'critical' && !t.passed)
    if (energyErrors.length > 0) {
      recommendations.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.')
    }

    const sweetSpotErrors = testSuite.tests.sweetSpotValidation.filter(t => t.severity === 'critical' && !t.passed)
    if (sweetSpotErrors.length > 0) {
      recommendations.push('–ù–∞—Ä—É—à–µ–Ω–∏—è Sweet Spot –ø—Ä–∞–≤–∏–ª. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ energy_range –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–¥–∞–Ω –¥–ª—è –≤—Å–µ—Ö targets.')
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (testSuite.summary.errors > testSuite.summary.totalTests * 0.3) {
      recommendations.push('–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –≤ —É—Ä–æ–≤–Ω–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è —Ä–µ–≤–∏–∑–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.')
    }

    if (recommendations.length === 0) {
      recommendations.push('–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ. –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.')
    }

    return recommendations
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
   */
  private createErrorReport(level: Level, error: any): LevelValidationReport {
    return {
      levelOrder: level.registryOrder || 0,
      levelId: level.metadata.level_id,
      timestamp: new Date().toISOString(),
      testSuites: {
        levelId: level.metadata.level_id,
        levelOrder: level.registryOrder || 0,
        tests: {
          uniqueness: [],
          energyValidation: [],
          sweetSpotValidation: []
        },
        summary: {
          totalTests: 1,
          passed: 0,
          failed: 1,
          warnings: 0,
          errors: 1
        }
      },
      recommendations: ['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.'],
      overallStatus: 'critical'
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   */
  private async loadAllLevelsForComparison(): Promise<Level[]> {
    const levels: Level[] = []
    const availableLevels = levelManager.getAvailableLevels()

    for (const levelInfo of availableLevels) {
      try {
        const level = await levelManager.loadLevelByOrder(levelInfo.id)
        if (level) {
          levels.push(level)
        }
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ${levelInfo.id} –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:`, error)
      }
    }

    return levels
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private generateSummaryStats(reports: LevelValidationReport[]): void {
    const totalLevels = reports.length
    const passedLevels = reports.filter(r => r.overallStatus === 'passed').length
    const warningLevels = reports.filter(r => r.overallStatus === 'warning').length
    const failedLevels = reports.filter(r => r.overallStatus === 'failed').length
    const criticalLevels = reports.filter(r => r.overallStatus === 'critical').length

    console.log(`üìä LEVEL_TEST_RUNNER: –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê`)
    console.log(`üìä –í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π: ${totalLevels}`)
    console.log(`‚úÖ –ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: ${passedLevels} (${(passedLevels/totalLevels*100).toFixed(1)}%)`)
    console.log(`‚ö†Ô∏è –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: ${warningLevels} (${(warningLevels/totalLevels*100).toFixed(1)}%)`)
    console.log(`‚ùå –° –æ—à–∏–±–∫–∞–º–∏: ${failedLevels} (${(failedLevels/totalLevels*100).toFixed(1)}%)`)
    console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: ${criticalLevels} (${(criticalLevels/totalLevels*100).toFixed(1)}%)`)

    if (criticalLevels > 0) {
      console.log(`üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—Ä–æ–≤–Ω–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏!`)
      const criticalReports = reports.filter(r => r.overallStatus === 'critical')
      criticalReports.forEach(r => {
        console.log(`  - –£—Ä–æ–≤–µ–Ω—å ${r.levelOrder}: ${r.recommendations.join(', ')}`)
      })
    }
  }
}