/**
 * SweetSpotValidator
 * –í–∞–ª–∏–¥–∞—Ü–∏—è Sweet Spot –º–µ—Ö–∞–Ω–∏–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ Game Design 3.2
 * –≠–Ω–µ—Ä–≥–∏—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ Useful Energy —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω—ã
 */

import { CircuitSimulator } from '../game/circuitSimulator'
import type { Level } from '../types'
import type { TestResult, SweetSpotTestCase } from './types'

export class SweetSpotValidator {
  private simulator: CircuitSimulator

  constructor() {
    this.simulator = new CircuitSimulator()
  }

  /**
   * –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Sweet Spot –º–µ—Ö–∞–Ω–∏–∫–∏ —É—Ä–æ–≤–Ω—è
   */
  validateSweetSpotRules(level: Level): TestResult[] {
    const results: TestResult[] = []
    const levelId = level.registryOrder?.toString() || level.metadata.level_id

    console.log(`üéØ SWEETSPOT_VALIDATOR: –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Sweet Spot –¥–ª—è —É—Ä–æ–≤–Ω—è ${levelId}`)

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä
      this.simulator.loadLevel(level)

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
      results.push(...this.validateSweetSpotDefinitions(level))

      // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Sweet Spot
      results.push(...this.testSweetSpotBoundaries(level))

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Heat Loss –ª–æ–≥–∏–∫—É (—ç–Ω–µ—Ä–≥–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
      results.push(...this.testHeatLossLogic(level))

      // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      results.push(...this.testEfficiencyCalculation(level))

      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–æ–º
      results.push(...this.testSupercapacitorInteraction(level))

    } catch (error) {
      results.push({
        passed: false,
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Sweet Spot –≤ —É—Ä–æ–≤–Ω–µ ${levelId}: ${error.message}`,
        details: { error: error.stack },
        severity: 'critical'
      })
    }

    console.log(`üéØ SWEETSPOT_VALIDATOR: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è ${levelId}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`)
    return results
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
   */
  private validateSweetSpotDefinitions(level: Level): TestResult[] {
    const results: TestResult[] = []
    const targets = level.circuit_definition.targets

    for (const target of targets) {
      if (!target.energy_range || target.energy_range.length !== 2) {
        results.push({
          passed: false,
          message: `Target ${target.id} –Ω–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–∞`,
          severity: 'critical'
        })
        continue
      }

      const [minEnergy, maxEnergy] = target.energy_range

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏–Ω–∏–º—É–º –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
      if (minEnergy >= maxEnergy) {
        results.push({
          passed: false,
          message: `Target ${target.id} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Sweet Spot: [${minEnergy}, ${maxEnergy}]`,
          severity: 'critical'
        })
        continue
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
      if (minEnergy <= 0 || maxEnergy <= 0) {
        results.push({
          passed: false,
          message: `Target ${target.id} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Sweet Spot: [${minEnergy}, ${maxEnergy}] (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0)`,
          severity: 'error'
        })
        continue
      }

      results.push({
        passed: true,
        message: `Target ${target.id} –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Sweet Spot: [${minEnergy.toFixed(1)}, ${maxEnergy.toFixed(1)}] EU`,
        details: { targetId: target.id, sweetSpot: target.energy_range },
        severity: 'info'
      })
    }

    return results
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π Sweet Spot
   */
  private testSweetSpotBoundaries(level: Level): TestResult[] {
    const results: TestResult[] = []
    const targets = level.circuit_definition.targets

    for (const target of targets) {
      if (!target.energy_range) continue

      const [minEnergy, maxEnergy] = target.energy_range
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      const testCases: SweetSpotTestCase = {
        targetId: target.id,
        sweetSpotRange: [minEnergy, maxEnergy],
        testValues: [
          // –¢–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
          { deliveredEnergy: minEnergy, expectedUseful: minEnergy, expectedInRange: true },
          { deliveredEnergy: maxEnergy, expectedUseful: maxEnergy, expectedInRange: true },
          
          // –ß—É—Ç—å –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
          { deliveredEnergy: minEnergy - 0.1, expectedUseful: 0, expectedInRange: false },
          
          // –ß—É—Ç—å –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞  
          { deliveredEnergy: maxEnergy + 0.1, expectedUseful: 0, expectedInRange: false },
          
          // –í —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
          { deliveredEnergy: (minEnergy + maxEnergy) / 2, expectedUseful: (minEnergy + maxEnergy) / 2, expectedInRange: true }
        ]
      }

      results.push(...this.runSweetSpotTestCase(testCases))
    }

    return results
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è –¥–ª—è Sweet Spot
   */
  private runSweetSpotTestCase(testCase: SweetSpotTestCase): TestResult[] {
    const results: TestResult[] = []
    const [minEnergy, maxEnergy] = testCase.sweetSpotRange

    for (const testValue of testCase.testValues) {
      try {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏ –∫ —Ü–µ–ª–∏
        const actualInRange = this.isEnergyInSweetSpot(testValue.deliveredEnergy, minEnergy, maxEnergy)
        const actualUseful = actualInRange ? testValue.deliveredEnergy : 0

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
        if (actualInRange !== testValue.expectedInRange) {
          results.push({
            passed: false,
            message: `Sweet Spot –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Ä—É—à–µ–Ω–∞ –¥–ª—è ${testCase.targetId}: ${testValue.deliveredEnergy.toFixed(1)} EU –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${testValue.expectedInRange ? '–í' : '–í–ù–ï'} –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${minEnergy.toFixed(1)}, ${maxEnergy.toFixed(1)}]`,
            details: {
              targetId: testCase.targetId,
              deliveredEnergy: testValue.deliveredEnergy,
              sweetSpot: testCase.sweetSpotRange,
              expectedInRange: testValue.expectedInRange,
              actualInRange: actualInRange
            },
            severity: 'critical'
          })
        }

        if (Math.abs(actualUseful - testValue.expectedUseful) > 0.01) {
          results.push({
            passed: false,
            message: `–ü–æ–ª–µ–∑–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ –¥–ª—è ${testCase.targetId}: –æ–∂–∏–¥–∞–ª–∏ ${testValue.expectedUseful.toFixed(1)} EU, –ø–æ–ª—É—á–∏–ª–∏ ${actualUseful.toFixed(1)} EU`,
            details: {
              targetId: testCase.targetId,
              deliveredEnergy: testValue.deliveredEnergy,
              expectedUseful: testValue.expectedUseful,
              actualUseful: actualUseful
            },
            severity: 'critical'
          })
        }

      } catch (error) {
        results.push({
          passed: false,
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Sweet Spot –¥–ª—è ${testCase.targetId}: ${error.message}`,
          severity: 'error'
        })
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    if (results.length === 0) {
      results.push({
        passed: true,
        message: `Sweet Spot –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è ${testCase.targetId}`,
        details: { targetId: testCase.targetId, sweetSpot: testCase.sweetSpotRange },
        severity: 'info'
      })
    }

    return results
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Heat Loss –ª–æ–≥–∏–∫–∏
   */
  private testHeatLossLogic(level: Level): TestResult[] {
    const results: TestResult[] = []

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–¥–µ —ç–Ω–µ—Ä–≥–∏—è –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ Sweet Spot
      const testResult = this.createHeatLossTestScenario(level)
      
      if (testResult.simulationResult.finalScore > 5) { // –î–æ–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–∞
        results.push({
          passed: false,
          message: `Heat Loss –ª–æ–≥–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${testResult.simulationResult.finalScore.toFixed(1)}% –ø—Ä–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤–Ω–µ Sweet Spot`,
          details: {
            finalScore: testResult.simulationResult.finalScore,
            energyDistribution: testResult.simulationResult.energyDistribution,
            targetsLit: testResult.simulationResult.targetsLit
          },
          severity: 'critical'
        })
      } else {
        results.push({
          passed: true,
          message: `Heat Loss –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: —ç–Ω–µ—Ä–≥–∏—è –≤–Ω–µ Sweet Spot –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${testResult.simulationResult.finalScore.toFixed(1)}%)`,
          severity: 'info'
        })
      }

    } catch (error) {
      results.push({
        passed: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Heat Loss –ª–æ–≥–∏–∫–∏: ${error.message}`,
        severity: 'error'
      })
    }

    return results
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private testEfficiencyCalculation(level: Level): TestResult[] {
    const results: TestResult[] = []

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      this.simulator.clearAll()
      const loadSuccess = this.simulator.loadOptimalSolution()

      if (!loadSuccess) {
        results.push({
          passed: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          severity: 'warning'
        })
        return results
      }

      const simulationResult = this.simulator.simulate()
      const source = this.simulator.getSource()
      const supercapacitor = this.simulator.getSupercapacitor()

      if (!source) {
        results.push({
          passed: false,
          message: '–ò—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          severity: 'critical'
        })
        return results
      }

      // –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Game Design 3.2
      const sourceEnergyOutput = source.getAvailableEnergy()
      let totalUsefulEnergy = 0

      // 1. –≠–Ω–µ—Ä–≥–∏—è –≤ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
      for (const [targetId, deliveredEnergy] of Object.entries(simulationResult.energyDistribution)) {
        const target = level.circuit_definition.targets.find(t => t.id === targetId)
        if (target && target.energy_range) {
          const [minEnergy, maxEnergy] = target.energy_range
          if (deliveredEnergy >= minEnergy && deliveredEnergy <= maxEnergy) {
            totalUsefulEnergy += deliveredEnergy
            console.log(`üéØ EFFICIENCY: ${targetId} - ${deliveredEnergy.toFixed(1)} EU –≤ Sweet Spot [${minEnergy}-${maxEnergy}] ‚úÖ`)
          } else {
            console.log(`üéØ EFFICIENCY: ${targetId} - ${deliveredEnergy.toFixed(1)} EU –í–ù–ï Sweet Spot [${minEnergy}-${maxEnergy}] ‚ùå`)
          }
        }
      }

      // 2. –≠–Ω–µ—Ä–≥–∏—è –≤ —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–µ
      const supercapacitorEnergy = supercapacitor ? supercapacitor.getScore() : 0
      totalUsefulEnergy += supercapacitorEnergy

      // 3. –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const expectedEfficiency = sourceEnergyOutput > 0 ? (totalUsefulEnergy / sourceEnergyOutput) * 100 : 0

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–∏–º—É–ª—è—Ü–∏–∏
      const efficiencyDifference = Math.abs(simulationResult.finalScore - expectedEfficiency)
      
      if (efficiencyDifference > 0.1) { // 0.1% –¥–æ–ø—É—Å–∫ –Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
        results.push({
          passed: false,
          message: `–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–≤–µ—Ä–µ–Ω: –æ–∂–∏–¥–∞–ª–∏ ${expectedEfficiency.toFixed(2)}%, –ø–æ–ª—É—á–∏–ª–∏ ${simulationResult.finalScore.toFixed(2)}%`,
          details: {
            expectedEfficiency,
            actualEfficiency: simulationResult.finalScore,
            difference: efficiencyDifference,
            totalUsefulEnergy,
            sourceEnergyOutput,
            supercapacitorEnergy,
            energyDistribution: simulationResult.energyDistribution
          },
          severity: 'critical'
        })
      } else {
        results.push({
          passed: true,
          message: `–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${simulationResult.finalScore.toFixed(2)}% (—Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç: ${expectedEfficiency.toFixed(2)}%)`,
          details: {
            efficiency: simulationResult.finalScore,
            totalUsefulEnergy,
            sourceEnergyOutput
          },
          severity: 'info'
        })
      }

    } catch (error) {
      results.push({
        passed: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${error.message}`,
        severity: 'error'
      })
    }

    return results
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–æ–º
   */
  private testSupercapacitorInteraction(level: Level): TestResult[] {
    const results: TestResult[] = []

    try {
      // –°—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è —ç–Ω–µ—Ä–≥–∏—é
      // –ò —ç—Ç–∞ —ç–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –≤—Å–µ–≥–¥–∞ –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ–ª–µ–∑–Ω–∞—è (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Sweet Spot)
      
      this.simulator.clearAll()
      const supercapacitor = this.simulator.getSupercapacitor()
      
      if (!supercapacitor) {
        results.push({
          passed: true,
          message: '–£—Ä–æ–≤–µ–Ω—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä',
          severity: 'info'
        })
        return results
      }

      // –¢–µ—Å—Ç: –ø—É—Å—Ç–∞—è —Ü–µ–ø—å –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å—é —ç–Ω–µ—Ä–≥–∏—é –≤ —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä
      const emptyCircuitResult = this.simulator.simulate()
      const source = this.simulator.getSource()
      
      if (source) {
        const sourceEnergy = source.getAvailableEnergy()
        const supercapacitorEnergy = supercapacitor.getScore()
        
        // –ü—Ä–∏ –ø—É—Å—Ç–æ–π —Ü–µ–ø–∏ –≤—Å—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏ –≤ —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä
        if (Math.abs(supercapacitorEnergy - sourceEnergy) < 0.01) {
          results.push({
            passed: true,
            message: `–°—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é: ${supercapacitorEnergy.toFixed(1)} EU`,
            severity: 'info'
          })
        } else {
          results.push({
            passed: false,
            message: `–°—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏: –æ–∂–∏–¥–∞–ª–∏ ${sourceEnergy.toFixed(1)} EU, –ø–æ–ª—É—á–∏–ª ${supercapacitorEnergy.toFixed(1)} EU`,
            details: {
              expected: sourceEnergy,
              actual: supercapacitorEnergy
            },
            severity: 'error'
          })
        }

        // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100% (–≤—Å—è —ç–Ω–µ—Ä–≥–∏—è –ø–æ–ª–µ–∑–Ω–∞)
        if (Math.abs(emptyCircuitResult.finalScore - 100) > 0.1) {
          results.push({
            passed: false,
            message: `–°—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä –Ω–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 100% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–π —Ü–µ–ø–∏: ${emptyCircuitResult.finalScore.toFixed(1)}%`,
            severity: 'error'
          })
        }
      }

    } catch (error) {
      results.push({
        passed: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–æ–º: ${error.message}`,
        severity: 'error'
      })
    }

    return results
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –≤ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω
   */
  private isEnergyInSweetSpot(energy: number, minEnergy: number, maxEnergy: number): boolean {
    return energy >= minEnergy && energy <= maxEnergy
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è Heat Loss –ª–æ–≥–∏–∫–∏
   */
  private createHeatLossTestScenario(level: Level): { simulationResult: any } {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–¥–µ –∑–∞–≤–µ–¥–æ–º–æ –∏–∑–≤–µ—Å—Ç–Ω–æ —á—Ç–æ —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –ø–æ–ø–∞–¥–µ—Ç –≤ Sweet Spot
    this.simulator.clearAll()

    const components = level.circuit_definition.available_components
    const targets = level.circuit_definition.targets

    if (components.length > 0 && targets.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å
      const component = components[0]
      const target = targets[0]

      // –†–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º
      this.simulator.placeComponent(component.id, { x: 150, y: 150 })
      this.simulator.connectComponents('SOURCE', component.id)
      this.simulator.connectComponents(component.id, target.id)

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –≤–Ω–µ Sweet Spot
      // (—ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
    }

    const simulationResult = this.simulator.simulate()
    return { simulationResult }
  }
}