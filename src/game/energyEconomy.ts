import {
  GameComponent,
  GameVoltageSource,
  GameLED,
  GameResistor,
  GameSwitch,
  GameSupercapacitor
} from './components'
import { ComponentType } from '../types'

export interface EnergyFlowResult {
  isValid: boolean
  targetsLit: string[]
  totalEnergyUsed: number
  energyDistribution: Record<string, number>
  finalScore: number
  errors: string[]
}

export interface CircuitNode {
  id: string
  component: GameComponent
  voltage: number
  current: number
  energyIn: number
  energyOut: number
}

export class EnergyCalculator {
  private components: Map<string, GameComponent>
  private connections: Map<string, string[]>
  private source: GameVoltageSource
  private targets: GameLED[]
  private supercapacitor: GameSupercapacitor

  constructor(
    source: GameVoltageSource,
    targets: GameLED[],
    supercapacitor: GameSupercapacitor
  ) {
    this.source = source
    this.targets = targets
    this.supercapacitor = supercapacitor
    this.components = new Map()
    this.connections = new Map()

    // Add source and targets to components map
    this.components.set(source.id, source)
    this.supercapacitor.reset()
    this.components.set(supercapacitor.id, supercapacitor)
    
    targets.forEach(target => {
      this.components.set(target.id, target)
    })
  }

  addComponent(component: GameComponent): void {
    this.components.set(component.id, component)
  }

  addConnection(fromId: string, toId: string): void {
    console.log(`üîó ENERGY: addConnection –≤—ã–∑–≤–∞–Ω–∞: ${fromId} -> ${toId}`)
    
    // Create bidirectional connections in the Map
    // Add fromId -> toId
    if (!this.connections.has(fromId)) {
      this.connections.set(fromId, [])
      console.log(`üÜï ENERGY: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ connections –¥–ª—è ${fromId}`)
    }
    
    const fromConnections = this.connections.get(fromId)!
    if (!fromConnections.includes(toId)) {
      fromConnections.push(toId)
      console.log(`‚ûï ENERGY: –î–æ–±–∞–≤–ª–µ–Ω connection: ${fromId} -> ${toId}`)
    } else {
      console.log(`‚ö†Ô∏è ENERGY: Connection ${fromId} -> ${toId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
    }

    // Add toId -> fromId (bidirectional)
    if (!this.connections.has(toId)) {
      this.connections.set(toId, [])
      console.log(`üÜï ENERGY: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ connections –¥–ª—è ${toId}`)
    }
    
    const toConnections = this.connections.get(toId)!
    if (!toConnections.includes(fromId)) {
      toConnections.push(fromId)
      console.log(`‚ûï ENERGY: –î–æ–±–∞–≤–ª–µ–Ω bidirectional connection: ${toId} -> ${fromId}`)
    } else {
      console.log(`‚ö†Ô∏è ENERGY: Bidirectional connection ${toId} -> ${fromId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
    }

    // Update component connections
    const fromComponent = this.components.get(fromId)
    const toComponent = this.components.get(toId)
    
    console.log(`üß© ENERGY: fromComponent (${fromId}):`, fromComponent ? `${fromComponent.type} –ù–ê–ô–î–ï–ù` : '–ù–ï –ù–ê–ô–î–ï–ù')
    console.log(`üß© ENERGY: toComponent (${toId}):`, toComponent ? `${toComponent.type} –ù–ê–ô–î–ï–ù` : '–ù–ï –ù–ê–ô–î–ï–ù')
    
    if (fromComponent && toComponent) {
      fromComponent.connect(toId)
      toComponent.connect(fromId)
      console.log(`‚úÖ ENERGY: Bidirectional component connection —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–µ–∂–¥—É ${fromId} –∏ ${toId}`)
    } else {
      console.log(`‚ùå ENERGY: –ù–ï —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å bidirectional component connection`)
    }
    
    // Debug: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ connections Map –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
    console.log(`üìã ENERGY: Connections –¥–ª—è ${fromId}: [${this.connections.get(fromId)?.join(', ')}]`)
    console.log(`üìã ENERGY: Connections –¥–ª—è ${toId}: [${this.connections.get(toId)?.join(', ')}]`)
  }

  removeConnection(fromId: string, toId: string): void {
    // Remove fromId -> toId
    const fromConnections = this.connections.get(fromId)
    if (fromConnections) {
      const index = fromConnections.indexOf(toId)
      if (index > -1) {
        fromConnections.splice(index, 1)
        console.log(`‚ûñ ENERGY: –£–¥–∞–ª–µ–Ω connection: ${fromId} -> ${toId}`)
      }
    }

    // Remove toId -> fromId (bidirectional)
    const toConnections = this.connections.get(toId)
    if (toConnections) {
      const index = toConnections.indexOf(fromId)
      if (index > -1) {
        toConnections.splice(index, 1)
        console.log(`‚ûñ ENERGY: –£–¥–∞–ª–µ–Ω bidirectional connection: ${toId} -> ${fromId}`)
      }
    }

    // Update component connections
    const fromComponent = this.components.get(fromId)
    const toComponent = this.components.get(toId)
    
    if (fromComponent && toComponent) {
      fromComponent.disconnect(toId)
      toComponent.disconnect(fromId)
      console.log(`‚úÖ ENERGY: Bidirectional component disconnection –º–µ–∂–¥—É ${fromId} –∏ ${toId}`)
    }
  }

  simulate(): EnergyFlowResult {
    const errors: string[] = []
    const energyDistribution: Record<string, number> = {}
    const targetsLit: string[] = []
    
    console.log(`üîã ENERGY: simulate() –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è`)
    console.log(`üîã ENERGY: –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ Map:`, this.components.size)
    console.log(`üîã ENERGY: –î–æ—Å—Ç—É–ø–Ω–æ connections:`, this.connections.size)
    
    // Debug: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ connections Map
    console.log(`üîã ENERGY: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ connections Map:`)
    for (const [fromId, toIds] of this.connections) {
      console.log(`  ${fromId} -> [${toIds.join(', ')}]`)
    }
    
    // Debug: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ components Map
    console.log(`üîã ENERGY: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ components Map:`)
    for (const [id, component] of this.components) {
      console.log(`  ${id} -> ${component.type} (${component.constructor.name})`)
    }
    
    try {
      // Reset all components
      this.resetSimulation()
      
      // Find all paths from source to targets
      const pathsToTargets = this.findPathsToTargets()
      console.log(`üîã ENERGY: –ù–∞–π–¥–µ–Ω–æ –ø—É—Ç–µ–π –∫ —Ü–µ–ª—è–º:`, pathsToTargets.length)
      pathsToTargets.forEach((path, index) => {
        console.log(`  –ü—É—Ç—å ${index + 1}: ${path.join(' -> ')}`)
      })
      
      if (pathsToTargets.length === 0) {
        errors.push('No valid paths found from source to any target')
        return this.createErrorResult(errors)
      }

      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ Product Owner —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      // –®–∞–≥ 1: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      const pathResistances = this.calculatePathResistances(pathsToTargets)
      const energyDistributionByPath = this.distributeSourceEnergy(pathsToTargets, pathResistances)
      
      console.log('üîã ENERGY DISTRIBUTION: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ –ø—É—Ç—è–º:', energyDistributionByPath)
      
      // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –ø—É—Ç—å —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –µ–º—É —ç–Ω–µ—Ä–≥–∏–µ–π
      let totalEnergyUsed = 0
      
      for (let i = 0; i < pathsToTargets.length; i++) {
        const path = pathsToTargets[i]
        const pathEnergyBudget = energyDistributionByPath[i]
        
        const pathResult = this.calculatePathEnergyWithBudget(path, pathEnergyBudget)
        totalEnergyUsed += pathResult.energyUsed
        
        const targetId = path[path.length - 1]
        const target = this.components.get(targetId) as GameLED
        
        if (target && pathResult.energyDelivered > 0) {
          target.setEnergy(pathResult.energyDelivered)
          energyDistribution[targetId] = pathResult.energyDelivered
          
          if (target.isLit()) {
            targetsLit.push(targetId)
          }
        }
      }

      // Calculate remaining energy goes to supercapacitor
      const remainingEnergy = this.source.getAvailableEnergy() - totalEnergyUsed
      if (remainingEnergy > 0) {
        this.supercapacitor.store(remainingEnergy)
      }

      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°—Ç—Ä–æ–≥–∏–µ sweet spot –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç Product Owner
      // Efficiency (%) = (Total Useful Energy / Source Energy Output) * 100
      // Total Useful Energy = —Ç–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏—è –≤ sweet spot –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö + Energy in Supercapacitor
      
      const sourceEnergyOutput = this.source.getAvailableEnergy()
      let totalUsefulEnergy = 0
      
      console.log(`üéØ SWEET SPOT CHECK: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –≤ sweet spot –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö...`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ sweet spot
      for (const targetId of Object.keys(energyDistribution)) {
        const deliveredEnergy = energyDistribution[targetId]
        const target = this.components.get(targetId) as GameLED
        
        if (target && target.energyRange) {
          const [minEnergy, maxEnergy] = target.energyRange
          const isInSweetSpot = deliveredEnergy >= minEnergy && deliveredEnergy <= maxEnergy
          
          if (isInSweetSpot) {
            totalUsefulEnergy += deliveredEnergy
            console.log(`üéØ SWEET SPOT: ${targetId} –ø–æ–ª—É—á–∏–ª ${deliveredEnergy.toFixed(1)} EU –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [${minEnergy}-${maxEnergy}] ‚úÖ –ü–û–õ–ï–ó–ù–û`)
          } else {
            console.log(`üéØ SWEET SPOT: ${targetId} –ø–æ–ª—É—á–∏–ª ${deliveredEnergy.toFixed(1)} EU –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${minEnergy}-${maxEnergy}] ‚ùå HEAT LOSS`)
          }
        }
      }
      
      // –≠–Ω–µ—Ä–≥–∏—è –≤ —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–∞
      const supercapacitorEnergy = this.supercapacitor.getScore()
      totalUsefulEnergy += supercapacitorEnergy
      
      const finalScore = sourceEnergyOutput > 0 ? (totalUsefulEnergy / sourceEnergyOutput) * 100 : 0
      
      console.log(`üéØ EFFICIENCY CALC: –ü–æ–ª–µ–∑–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤ sweet spots: ${totalUsefulEnergy - supercapacitorEnergy} EU`)
      console.log(`üéØ EFFICIENCY CALC: –≠–Ω–µ—Ä–≥–∏—è –≤ —Å—É–ø–µ—Ä–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–µ: ${supercapacitorEnergy} EU`)
      console.log(`üéØ EFFICIENCY CALC: –û–±—â–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${totalUsefulEnergy} EU`)
      console.log(`üéØ EFFICIENCY CALC: –≠–Ω–µ—Ä–≥–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${sourceEnergyOutput} EU`)
      console.log(`üéØ EFFICIENCY CALC: Efficiency: ${finalScore.toFixed(1)}%`)
      
      const isValid = targetsLit.length === this.targets.length

      return {
        isValid,
        targetsLit,
        totalEnergyUsed,
        energyDistribution,
        finalScore,
        errors
      }

    } catch (error) {
      errors.push(`Simulation error: ${error}`)
      return this.createErrorResult(errors)
    }
  }

  private resetSimulation(): void {
    this.supercapacitor.reset()
    this.targets.forEach(target => target.setEnergy(0))
  }

  private findPathsToTargets(): string[][] {
    const paths: string[][] = []
    
    for (const target of this.targets) {
      const path = this.findPathToTarget(this.source.id, target.id, new Set())
      if (path.length > 0) {
        paths.push(path)
      }
    }
    
    return paths
  }

  private findPathToTarget(fromId: string, targetId: string, visited: Set<string>): string[] {
    console.log(`üõ§Ô∏è PATH: –ò—â–µ–º –ø—É—Ç—å –æ—Ç ${fromId} –∫ ${targetId}, visited: [${Array.from(visited).join(', ')}]`)
    
    if (fromId === targetId) {
      console.log(`üéØ PATH: –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ ${targetId}`)
      return [targetId]
    }
    
    if (visited.has(fromId)) {
      console.log(`üîÑ PATH: ${fromId} —É–∂–µ –ø–æ—Å–µ—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å`)
      return []
    }
    
    visited.add(fromId)
    
    const connections = this.connections.get(fromId) || []
    console.log(`üîó PATH: –û—Ç ${fromId} –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: [${connections.join(', ')}]`)
    
    for (const nextId of connections) {
      const component = this.components.get(nextId)
      console.log(`üß© PATH: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${nextId}: ${component ? `${component.type} (${component.constructor.name})` : '–ù–ï –ù–ê–ô–î–ï–ù'}`)
      
      // Check if component conducts (for switches)
      if (component?.type === ComponentType.SWITCH) {
        const switchComp = component as GameSwitch
        if (!switchComp.conducts()) {
          console.log(`üö´ PATH: Switch ${nextId} –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
          continue
        }
      }
      
      const path = this.findPathToTarget(nextId, targetId, new Set(visited))
      if (path.length > 0) {
        console.log(`‚úÖ PATH: –ù–∞–π–¥–µ–Ω –ø—É—Ç—å —á–µ—Ä–µ–∑ ${nextId}: [${fromId}, ...${path.join(' -> ')}]`)
        return [fromId, ...path]
      }
    }
    
    console.log(`‚ùå PATH: –ò–∑ ${fromId} –ø—É—Ç–∏ –∫ ${targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
    return []
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
  private calculatePathResistances(paths: string[][]): number[] {
    console.log('‚ö° RESISTANCE CALC: –†–∞—Å—á–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–π –ø—É—Ç–µ–π...')
    
    return paths.map((path, index) => {
      let totalResistance = 0
      
      // –°—É–º–º–∏—Ä—É–µ–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ø—É—Ç–∏ (–∫—Ä–æ–º–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Ü–µ–ª–∏)
      for (let i = 1; i < path.length - 1; i++) {
        const componentId = path[i]
        const component = this.components.get(componentId)
        
        if (component?.type === ComponentType.RESISTOR) {
          const resistor = component as GameResistor
          totalResistance += resistor.actualValue
          console.log(`‚ö° RESISTANCE CALC: ${componentId}: ${resistor.actualValue}Œ©`)
        }
      }
      
      console.log(`‚ö° RESISTANCE CALC: –ü—É—Ç—å ${index + 1} [${path.join(' -> ')}]: ${totalResistance}Œ©`)
      return totalResistance
    })
  }
  
  private distributeSourceEnergy(paths: string[][], resistances: number[]): number[] {
    const sourceEnergy = this.source.getAvailableEnergy()
    console.log(`‚ö° ENERGY SPLIT: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${sourceEnergy} EU –º–µ–∂–¥—É ${paths.length} –ø—É—Ç—è–º–∏`)
    
    // –≠–Ω–µ—Ä–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é
    // E1/E2 = R2/R1 (–º–µ–Ω—å—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏)
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–æ–±—Ä–∞—Ç–Ω—ã–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è–º)
    const conductances = resistances.map(r => r > 0 ? 1/r : 1) // –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    const totalConductance = conductances.reduce((sum, c) => sum + c, 0)
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—è–º
    const energyDistribution = conductances.map(conductance => {
      const energyShare = (conductance / totalConductance) * sourceEnergy
      return energyShare
    })
    
    console.log('‚ö° ENERGY SPLIT: –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:', resistances)
    console.log('‚ö° ENERGY SPLIT: –ü—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏:', conductances)
    console.log('‚ö° ENERGY SPLIT: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏:', energyDistribution)
    
    return energyDistribution
  }
  
  private calculatePathEnergyWithBudget(path: string[], energyBudget: number): { energyUsed: number; energyDelivered: number } {
    console.log(`üí∞ PATH ENERGY: –†–∞—Å—á–µ—Ç –¥–ª—è –ø—É—Ç–∏ [${path.join(' -> ')}] —Å –±—é–¥–∂–µ—Ç–æ–º ${energyBudget.toFixed(1)} EU`)
    
    if (path.length < 2) {
      console.log(`üí∞ PATH ENERGY: –ü—É—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π`)
      return { energyUsed: 0, energyDelivered: 0 }
    }

    let energyFlow = energyBudget
    let totalLoss = 0

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –ø—É—Ç–∏
    for (let i = 1; i < path.length - 1; i++) {
      const componentId = path[i]
      const component = this.components.get(componentId)
      
      if (!component) {
        console.log(`üí∞ PATH ENERGY: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
        continue
      }

      const loss = this.calculateComponentLoss(component, energyFlow)
      console.log(`üí∞ PATH ENERGY: –ü–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ ${componentId}: ${loss.toFixed(1)} EU`)
      totalLoss += loss
      energyFlow -= loss
      console.log(`üí∞ PATH ENERGY: –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ ${componentId}: ${energyFlow.toFixed(1)} EU`)
    }

    const energyDelivered = Math.max(0, energyFlow)
    const energyUsed = totalLoss
    
    console.log(`üí∞ PATH ENERGY: –ò—Ç–æ–≥–æ - –ø–æ—Ç–µ—Ä—è–Ω–æ: ${energyUsed.toFixed(1)} EU, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${energyDelivered.toFixed(1)} EU`)
    return { energyUsed, energyDelivered }
  }

  // –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ calculatePathEnergyWithBudget
  private calculatePathEnergy(path: string[]): { energyUsed: number; energyDelivered: number } {
    console.log(`üí∞ ENERGY CALC: calculatePathEnergy –¥–ª—è –ø—É—Ç–∏: [${path.join(' -> ')}]`)
    
    if (path.length < 2) {
      console.log(`üí∞ ENERGY CALC: –ü—É—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0`)
      return { energyUsed: 0, energyDelivered: 0 }
    }

    const sourceEnergy = this.source.getAvailableEnergy()
    console.log(`üí∞ ENERGY CALC: –ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${sourceEnergy} EU`)
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–∞–∂–¥—ã–π –ø—É—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ü–µ–ø–∏)
    // –í –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ü–µ–ø—è—Ö –∫–∞–∂–¥–∞—è –≤–µ—Ç–≤—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    let energyFlow = sourceEnergy
    console.log(`üí∞ ENERGY CALC: –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${energyFlow} EU (–ø–æ–ª–Ω–∞—è –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞)`)
    
    let totalLoss = 0

    // Calculate losses through each component in the path
    console.log(`üí∞ ENERGY CALC: –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ—Ä—å —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...`)
    for (let i = 1; i < path.length - 1; i++) {
      const componentId = path[i]
      const component = this.components.get(componentId)
      
      if (!component) {
        console.log(`üí∞ ENERGY CALC: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
        continue
      }

      const loss = this.calculateComponentLoss(component, energyFlow)
      console.log(`üí∞ ENERGY CALC: –ü–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ ${componentId} (${component.type}): ${loss} EU`)
      totalLoss += loss
      energyFlow -= loss
      console.log(`üí∞ ENERGY CALC: –û—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ—Å–ª–µ ${componentId}: ${energyFlow} EU`)
    }

    const energyDelivered = Math.max(0, energyFlow)
    const energyUsed = totalLoss // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    
    console.log(`üí∞ ENERGY CALC: –ò—Ç–æ–≥–æ - –ø–æ—Ç–µ—Ä—è–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: ${energyUsed} EU, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${energyDelivered} EU`)
    return { energyUsed, energyDelivered }
  }

  private calculateComponentLoss(component: GameComponent, energyIn: number): number {
    switch (component.type) {
      case ComponentType.RESISTOR:
        const resistor = component as GameResistor
        // Game-balanced percentage-based losses instead of I¬≤R formula
        // Higher resistance = higher percentage loss
        const resistance = resistor.actualValue
        let lossPercentage = 0
        
        if (resistance <= 100) {
          lossPercentage = 0.05 // 5% loss for low resistance
        } else if (resistance <= 300) {
          lossPercentage = 0.10 // 10% loss for medium-low resistance  
        } else if (resistance <= 500) {
          lossPercentage = 0.20 // 20% loss for medium resistance
        } else if (resistance <= 700) {
          lossPercentage = 0.30 // 30% loss for medium-high resistance
        } else {
          lossPercentage = 0.40 // 40% loss for high resistance
        }
        
        const loss = energyIn * lossPercentage
        console.log(`‚ö° RESISTOR: ${resistor.id} (${resistance}Œ©) ‚Üí ${(lossPercentage*100).toFixed(0)}% loss = ${loss.toFixed(1)} EU from ${energyIn.toFixed(1)} EU`)
        return loss

      case ComponentType.CAPACITOR:
        // Capacitors have minimal loss in our simplified model
        return energyIn * 0.01

      case ComponentType.INDUCTOR:
        // Inductors have minimal loss in our simplified model
        return energyIn * 0.01

      case ComponentType.SWITCH:
        const switchComp = component as GameSwitch
        return switchComp.conducts() ? 0 : energyIn // All energy lost if switch is open

      default:
        return 0
    }
  }

  private createErrorResult(errors: string[]): EnergyFlowResult {
    return {
      isValid: false,
      targetsLit: [],
      totalEnergyUsed: 0,
      energyDistribution: {},
      finalScore: 0,
      errors
    }
  }

  getComponents(): Map<string, GameComponent> {
    return new Map(this.components)
  }

  getConnections(): Map<string, string[]> {
    return new Map(this.connections)
  }
}