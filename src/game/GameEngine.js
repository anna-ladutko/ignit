/**
 * GameEngine - –ß–∏—Å—Ç—ã–π JavaScript –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å—é –∏–≥—Ä–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –±–µ–∑ React
 */

export class GameEngine {
  constructor(canvasElement, options = {}) {
    this.canvas = canvasElement
    this.components = new Map() // id -> {element, data, position}
    this.isDragging = false
    this.draggedComponent = null
    this.dragStartPosition = null
    this.touchStartTime = 0
    
    // Callbacks –¥–ª—è —Å–≤—è–∑–∏ —Å React
    this.onScoreChange = options.onScoreChange || (() => {})
    this.onComponentPlace = options.onComponentPlace || (() => {})
    this.onComponentRotate = options.onComponentRotate || (() => {})
    this.onLevelComplete = options.onLevelComplete || (() => {})
    
    this.setupCanvas()
    this.setupEvents()
  }
  
  setupCanvas() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–≤–∞—Å–∞ –¥–ª—è –∏–≥—Ä—ã
    this.canvas.style.position = 'relative'
    this.canvas.style.width = '100%'
    this.canvas.style.height = '100%'
    this.canvas.style.overflow = 'hidden'
    this.canvas.style.touchAction = 'none' // –û—Ç–∫–ª—é—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∂–µ—Å—Ç—ã
    this.canvas.style.userSelect = 'none'
    this.canvas.style.webkitUserSelect = 'none'
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –∏–∑ —Å–µ—Ä—ã—Ö —Ç–æ—á–µ—á–µ–∫
    this.canvas.style.backgroundImage = 'radial-gradient(circle, #666666 2px, transparent 2px)'
    this.canvas.style.backgroundSize = '40px 40px'
    this.canvas.style.backgroundPosition = '20px 20px' // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ grid
    
    console.log('‚úÖ GameEngine: Canvas setup –∑–∞–≤–µ—Ä—à–µ–Ω —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–æ–π')
  }
  
  setupEvents() {
    // –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.canvas.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false })
    this.canvas.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false })
    this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false })
    
    // Mouse events –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this))
    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this))
    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this))
  }
  
  // === –ò–ì–†–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê ===
  
  addComponent(componentData) {
    console.log(`üéÆ GAMEENGINE: addComponent –≤—ã–∑–≤–∞–Ω–∞ —Å componentData:`, componentData)
    console.log(`üéÆ GAMEENGINE: originalComponentId="${componentData.originalComponentId}"`)
    
    const element = this.createComponentElement(componentData)
    this.canvas.appendChild(element)
    
    const componentRecord = {
      element,
      data: componentData,
      position: { ...componentData.position },
      rotation: componentData.rotation || 0
    }
    
    this.components.set(componentData.id, componentRecord)
    
    console.log(`üéÆ GAMEENGINE: Added component ${componentData.id}`)
    console.log(`üéÆ GAMEENGINE: componentRecord.data.originalComponentId="${componentRecord.data.originalComponentId}"`)
    
    // Debug: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const storedComponent = this.components.get(componentData.id)
    console.log(`üéÆ GAMEENGINE: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - storedComponent.data.originalComponentId="${storedComponent.data.originalComponentId}"`)
  }
  
  createComponentElement(componentData) {
    const element = document.createElement('div')
    element.className = 'game-component'
    element.setAttribute('data-component-id', componentData.id)
    element.setAttribute('data-component-type', componentData.type)
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (100x40) - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ç–∫–æ–π
    element.style.position = 'absolute'
    
    // –ú–∞–≥–Ω–∏—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –Ω–∞ —Å–µ—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ (20px, 60px, 100px...)
    // SVG –º–∞–≥–Ω–∏—Ç–Ω—ã–µ —Ç–æ—á–∫–∏: cx="10" –∏ cx="90" (–≤ 100px –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
    // –ß—Ç–æ–±—ã –ª–µ–≤–∞—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è —Ç–æ—á–∫–∞ (10px) –ø–æ–ø–∞–ª–∞ –Ω–∞ —Å–µ—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É position.x:
    // left = position.x - 10px
    element.style.left = `${componentData.position.x - 10}px` 
    element.style.top = `${componentData.position.y - 20}px` // –¶–µ–Ω—Ç—Ä –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    element.style.width = '100px'
    element.style.height = '40px'
    element.style.cursor = 'pointer'
    element.style.zIndex = '10'
    
    // GPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    element.style.willChange = 'transform'
    element.style.backfaceVisibility = 'hidden'
    
    // –î–æ–±–∞–≤–ª—è–µ–º SVG —Å–∏–º–≤–æ–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    element.innerHTML = this.getComponentSVG(componentData)
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: SVG —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫ GameEngine
    const svg = element.querySelector('svg')
    if (svg) {
      svg.style.pointerEvents = 'none' // –°–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
    }
    
    return element
  }
  
  getComponentSVG(componentData) {
    console.log(`üîß GameEngine: getComponentSVG called for type: ${componentData.type}`)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π hybrid SVG –ø–æ–¥—Ö–æ–¥ —Å –º–∞–≥–Ω–∏—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    const { getComponentSVGForGameEngine, ComponentType } = window.SVGConverter || {}
    
    console.log(`üîó GameEngine: SVGConverter available:`, !!getComponentSVGForGameEngine, !!ComponentType)
    
    if (!getComponentSVGForGameEngine) {
      console.warn('‚ùå SVG Converter –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
      return this.getFallbackSVG(componentData)
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–∏–ø—ã –≤ ComponentType enum
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤, —Ç–∞–∫ –∏ –ø–∞–ª–∏—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const typeMap = {
      // –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
      'resistor': ComponentType?.RESISTOR,
      'capacitor': ComponentType?.CAPACITOR,
      'inductor': ComponentType?.INDUCTOR,
      'led': ComponentType?.LED,
      'voltage_source': ComponentType?.VOLTAGE_SOURCE,
      'switch': ComponentType?.SWITCH,
      'supercapacitor': ComponentType?.SUPERCAPACITOR,
      
      // –ü–∞–ª–∏—Ç–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤
      'R_DIV_1': ComponentType?.RESISTOR,
      'R_DIV_2': ComponentType?.RESISTOR,
      
      // –ü–∞–ª–∏—Ç–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–æ–≤  
      'C_FILTER': ComponentType?.CAPACITOR,
      'C_WRONG_1': ComponentType?.CAPACITOR,
      
      // –ü–∞–ª–∏—Ç–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
      'L_FILTER': ComponentType?.INDUCTOR,
      
      // –ü–∞–ª–∏—Ç–Ω—ã–µ —Ç–∏–ø—ã LED
      'TARGET_LED_1': ComponentType?.LED,
      'TARGET_LED_2': ComponentType?.LED
    }
    
    const componentType = typeMap[componentData.type]
    console.log(`üéØ GameEngine: Mapped ${componentData.type} to:`, componentType)
    
    if (!componentType) {
      console.warn(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${componentData.type}`)
      return this.getFallbackSVG(componentData)
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const isSource = componentData.type === 'voltage_source'
    const isTarget = componentData.type === 'led' && componentData.isPreinstalled
    const isSelected = false // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ setComponentState
    const isConnected = componentData.isConnected || false
    
    // –ü–æ–ª—É—á–∏—Ç—å ComponentState enum
    const { ComponentState } = window.SVGConverter || {}
    let componentState = 'disconnected' // fallback
    
    if (ComponentState) {
      if (isSource || isTarget) {
        // SOURCE –∏ TARGETS –≤—Å–µ–≥–¥–∞ –∑–æ–ª–æ—Ç—ã–µ (#FFBE4D)
        componentState = ComponentState.SOURCE
      } else if (isConnected) {
        componentState = ComponentState.CONNECTED  
      } else {
        componentState = ComponentState.DISCONNECTED
      }
    }
    
    const switchState = componentData.switchState || false
    
    console.log(`‚úÖ GameEngine: Calling getComponentSVGForGameEngine with state: ${componentState}`)
    const svgResult = getComponentSVGForGameEngine(componentType, componentState, switchState)
    console.log(`üìÑ GameEngine: Generated SVG length:`, svgResult?.length)
    
    return svgResult
  }
  
  getFallbackSVG(componentData) {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: SVG Converter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: SVG Converter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è ${componentData.type}!`)
    console.error(`‚ùå Bridge –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
    const color = '#FF0000' // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—à–∏–±–æ–∫
    
    return `<svg width="100" height="40" viewBox="0 0 100 40">
      <rect x="2" y="2" width="96" height="36" fill="none" stroke="${color}" stroke-width="2" stroke-dasharray="4,4"/>
      <text x="50" y="20" text-anchor="middle" fill="${color}" font-size="12">ERROR</text>
      <text x="50" y="32" text-anchor="middle" fill="${color}" font-size="8">${componentData.type}</text>
    </svg>`
  }
  
  // –°—Ç–∞—Ä–∞—è type-based —Å–∏—Å—Ç–µ–º–∞ —Ü–≤–µ—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞
  // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è state-based —Å–∏—Å—Ç–µ–º–∞ —á–µ—Ä–µ–∑ ComponentState
  
  // === DRAG & DROP ===
  
  handleTouchStart(e) {
    e.preventDefault()
    const touch = e.touches[0]
    this.startInteraction(touch.clientX, touch.clientY, e.target)
  }
  
  handleMouseDown(e) {
    e.preventDefault()
    this.startInteraction(e.clientX, e.clientY, e.target)
  }
  
  startInteraction(x, y, target) {
    // –ù–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    const componentElement = target.closest('[data-component-id]')
    if (!componentElement) return
    
    const componentId = componentElement.getAttribute('data-component-id')
    const component = this.components.get(componentId)
    if (!component) return
    
    // –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    this.isDragging = true
    this.draggedComponent = component
    this.dragStartPosition = { x, y }
    this.touchStartTime = Date.now()
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    this.setComponentSelected(componentElement, true)
    
    console.log(`GameEngine: Started dragging ${componentId}`)
  }
  
  handleTouchMove(e) {
    e.preventDefault()
    if (!this.isDragging || !this.draggedComponent) return
    
    const touch = e.touches[0]
    this.updateDrag(touch.clientX, touch.clientY)
  }
  
  handleMouseMove(e) {
    if (!this.isDragging || !this.draggedComponent) return
    
    this.updateDrag(e.clientX, e.clientY)
  }
  
  updateDrag(x, y) {
    if (!this.draggedComponent || !this.dragStartPosition) return
    
    // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è 60fps
    const deltaX = x - this.dragStartPosition.x
    const deltaY = y - this.dragStartPosition.y
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–∞–∑–¥–µ–ª–∏—Ç—å rotate –∏ translate –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const currentRotation = this.draggedComponent.rotation || 0
    this.draggedComponent.element.style.rotate = `${currentRotation}deg`
    this.draggedComponent.element.style.translate = `${deltaX}px ${deltaY}px`
  }
  
  handleTouchEnd(e) {
    e.preventDefault()
    if (!this.isDragging) return
    
    const touch = e.changedTouches[0]
    this.endInteraction(touch.clientX, touch.clientY)
  }
  
  handleMouseUp(e) {
    if (!this.isDragging) return
    
    this.endInteraction(e.clientX, e.clientY)
  }
  
  endInteraction(x, y) {
    if (!this.draggedComponent || !this.dragStartPosition) return
    
    const deltaX = x - this.dragStartPosition.x
    const deltaY = y - this.dragStartPosition.y
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)
    const duration = Date.now() - this.touchStartTime
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    const isTap = distance < 10 && duration < 200
    
    if (isTap) {
      // –ü–æ–≤–æ—Ä–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      this.rotateComponent(this.draggedComponent)
    } else {
      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      this.moveComponent(this.draggedComponent, deltaX, deltaY)
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    this.setComponentSelected(this.draggedComponent.element, false)
    // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é drag'–∞ - –ø–æ–≤–æ—Ä–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ setComponentSelected
    
    this.isDragging = false
    this.draggedComponent = null
    this.dragStartPosition = null
  }
  
  rotateComponent(component) {
    component.rotation = (component.rotation + 90) % 360
    component.element.style.rotate = `${component.rotation}deg`
    
    // –£–≤–µ–¥–æ–º–∏—Ç—å React
    this.onComponentRotate(component.data.id, component.rotation)
    
    console.log(`GameEngine: Rotated ${component.data.id} to ${component.rotation}¬∞`)
  }
  
  moveComponent(component, deltaX, deltaY) {
    // –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    const newPosition = {
      x: component.position.x + deltaX,
      y: component.position.y + deltaY
    }
    
    // Snap to grid
    const snappedPosition = this.snapToGrid(newPosition)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    if (this.isPositionOccupied(snappedPosition, component.data.id)) {
      console.log(`GameEngine: Position occupied, can't move ${component.data.id}`)
      return
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    component.position = snappedPosition
    component.element.style.left = `${snappedPosition.x - 10}px`  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å createComponentElement
    component.element.style.top = `${snappedPosition.y - 20}px`   // –¶–µ–Ω—Ç—Ä –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    
    // –£–≤–µ–¥–æ–º–∏—Ç—å React
    this.onComponentPlace(component.data.id, snappedPosition)
    
    console.log(`GameEngine: Moved ${component.data.id} to`, snappedPosition)
  }
  
  // === –£–¢–ò–õ–ò–¢–´ ===
  
  snapToGrid(position) {
    const GRID_SIZE = 40
    return {
      x: Math.round(position.x / GRID_SIZE) * GRID_SIZE,
      y: Math.round(position.y / GRID_SIZE) * GRID_SIZE
    }
  }
  
  isPositionOccupied(position, excludeComponentId) {
    for (const [id, component] of this.components) {
      if (id === excludeComponentId) continue
      
      const dx = Math.abs(component.position.x - position.x)
      const dy = Math.abs(component.position.y - position.y)
      
      if (dx < 20 && dy < 20) { // GRID_SIZE/2
        return true
      }
    }
    return false
  }
  
  setComponentSelected(element, selected) {
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–≤–æ—Ä–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const componentId = element.getAttribute('data-component-id')
    const component = this.components.get(componentId)
    const currentRotation = component?.rotation || 0
    
    if (selected) {
      // –û–±–Ω–æ–≤–∏—Ç—å SVG —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º SELECTED (–±–µ–ª—ã–π —Ü–≤–µ—Ç)
      this.updateComponentState(componentId, 'selected')
      element.style.rotate = `${currentRotation}deg`
      element.style.scale = '1.1'
      element.style.zIndex = '1000'
    } else {
      // –í–µ—Ä–Ω—É—Ç—å –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      this.updateComponentState(componentId, null) // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      element.style.rotate = `${currentRotation}deg`
      element.style.scale = '1'
      element.style.translate = '0px 0px'
      element.style.zIndex = '10'
    }
  }
  
  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è SVGConverter
  mapComponentType(type) {
    const { ComponentType } = window.SVGConverter || {}
    if (!ComponentType) return type
    
    const typeMap = {
      'resistor': ComponentType.RESISTOR,
      'capacitor': ComponentType.CAPACITOR,
      'inductor': ComponentType.INDUCTOR,
      'led': ComponentType.LED,
      'voltage_source': ComponentType.VOLTAGE_SOURCE,
      'switch': ComponentType.SWITCH,
      'supercapacitor': ComponentType.SUPERCAPACITOR,
      
      // –ü–∞–ª–∏—Ç–Ω—ã–µ —Ç–∏–ø—ã
      'R_DIV_1': ComponentType.RESISTOR,
      'R_DIV_2': ComponentType.RESISTOR,
      'C_FILTER': ComponentType.CAPACITOR,
      'C_WRONG_1': ComponentType.CAPACITOR,
      'L_FILTER': ComponentType.INDUCTOR,
      'TARGET_LED_1': ComponentType.LED,
      'TARGET_LED_2': ComponentType.LED
    }
    
    return typeMap[type] || type
  }
  
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  updateComponentState(componentId, forceState = null) {
    const component = this.components.get(componentId)
    if (!component) return
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const isSource = component.data.type === 'voltage_source'
    const isTarget = component.data.type === 'led' && component.data.isPreinstalled
    const isConnected = component.data.isConnected || false
    
    let state = 'disconnected'
    if (forceState) {
      state = forceState
    } else if (isSource || isTarget) {
      // SOURCE –∏ TARGETS –≤—Å–µ–≥–¥–∞ –∑–æ–ª–æ—Ç—ã–µ
      state = 'source'
    } else if (isConnected) {
      state = 'connected'
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å ComponentState enum
    const { ComponentState } = window.SVGConverter || {}
    let componentState = state
    
    if (ComponentState) {
      switch(state) {
        case 'selected': componentState = ComponentState.SELECTED; break
        case 'connected': componentState = ComponentState.CONNECTED; break
        case 'source': componentState = ComponentState.SOURCE; break
        default: componentState = ComponentState.DISCONNECTED; break
      }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å SVG —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    const { getComponentSVGForGameEngine } = window.SVGConverter || {}
    if (getComponentSVGForGameEngine) {
      const componentType = this.mapComponentType(component.data.type)
      const newSVG = getComponentSVGForGameEngine(componentType, componentState, false)
      component.element.innerHTML = newSVG
      
      // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ SVG –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
      const svg = component.element.querySelector('svg')
      if (svg) {
        svg.style.pointerEvents = 'none'
      }
    }
  }
  
  // === –ü–£–ë–õ–ò–ß–ù–´–ô API ===
  
  loadLevel(levelData) {
    this.clearComponents()
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if (levelData.preinstalledComponents) {
      levelData.preinstalledComponents.forEach(comp => {
        this.addComponent(comp)
      })
    }
    
    console.log('GameEngine: Level loaded', levelData)
  }
  
  clearComponents() {
    for (const [id, component] of this.components) {
      this.canvas.removeChild(component.element)
    }
    this.components.clear()
  }
  
  destroy() {
    this.clearComponents()
    // Remove event listeners
    this.canvas.removeEventListener('touchstart', this.handleTouchStart)
    this.canvas.removeEventListener('touchmove', this.handleTouchMove) 
    this.canvas.removeEventListener('touchend', this.handleTouchEnd)
    this.canvas.removeEventListener('mousedown', this.handleMouseDown)
    this.canvas.removeEventListener('mousemove', this.handleMouseMove)
    this.canvas.removeEventListener('mouseup', this.handleMouseUp)
  }
}