/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è Prometheus Studio
 * –°–æ–∑–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
 */

import type { Level } from '../types'

export interface CircuitSimulationResult {
  targetId: string
  deliveredEnergy: number
  pathResistance: number
  pathLosses: number
}

export interface SweetSpotGenerationResult {
  originalTargets: Array<{
    id: string
    originalRange: [number, number]
    deliveredEnergy: number
  }>
  correctedTargets: Array<{
    id: string
    correctedRange: [number, number]
    deliveredEnergy: number
    improvementFactor: number
  }>
  overallImprovement: number
  energyBalance: {
    sourceEnergy: number
    totalDelivered: number
    supercapacitorEnergy: number
    newExpectedScore: number
  }
}

export class SweetSpotGenerator {
  
  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
   */
  generateCorrectSweetSpots(level: Level): SweetSpotGenerationResult {
    console.log('üéØ SWEETSPOT_GENERATOR: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤')
    
    // 1. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
    const simulationResults = this.simulateEnergyDistribution(level)
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const originalTargets = level.circuit_definition.targets.map(target => ({
      id: target.id,
      originalRange: target.energy_range as [number, number],
      deliveredEnergy: simulationResults.find(r => r.targetId === target.id)?.deliveredEnergy || 0
    }))
    
    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const correctedTargets = originalTargets.map(target => {
      const correctedRange = this.calculateOptimalSweetSpot(target.deliveredEnergy)
      const improvementFactor = this.calculateImprovementFactor(target.originalRange, correctedRange, target.deliveredEnergy)
      
      return {
        id: target.id,
        correctedRange,
        deliveredEnergy: target.deliveredEnergy,
        improvementFactor
      }
    })
    
    // 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å
    const energyBalance = this.calculateNewEnergyBalance(level, correctedTargets)
    
    // 5. –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ
    const overallImprovement = this.calculateOverallImprovement(originalTargets, correctedTargets)
    
    const result: SweetSpotGenerationResult = {
      originalTargets,
      correctedTargets,
      overallImprovement,
      energyBalance
    }
    
    console.log('üìä SWEETSPOT_GENERATOR: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:')
    console.log(`   –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: ${overallImprovement.toFixed(1)}%`)
    console.log(`   –ù–æ–≤—ã–π expected_score: ${energyBalance.newExpectedScore.toFixed(1)}%`)
    
    return result
  }
  
  /**
   * –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å—Ö–µ–º–µ
   */
  private simulateEnergyDistribution(level: Level): CircuitSimulationResult[] {
    const source = level.circuit_definition.source
    const targets = level.circuit_definition.targets
    const components = level.circuit_definition.available_components
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ optimal solution –µ—Å–ª–∏ –µ—Å—Ç—å
    const optimalSolution = level.solution_data?.optimal_solution
    if (optimalSolution?.simulation_result?.energy_distribution) {
      return targets.map(target => {
        const deliveredEnergy = optimalSolution.simulation_result.energy_distribution[target.id] || 0
        
        return {
          targetId: target.id,
          deliveredEnergy,
          pathResistance: this.estimatePathResistance(target.id, components),
          pathLosses: this.estimatePathLosses(deliveredEnergy)
        }
      })
    }
    
    // Fallback: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
    return this.performSimplifiedSimulation(level)
  }
  
  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ optimal solution
   */
  private performSimplifiedSimulation(level: Level): CircuitSimulationResult[] {
    const source = level.circuit_definition.source
    const targets = level.circuit_definition.targets
    const components = level.circuit_definition.available_components
    
    // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å: —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏
    const resistors = components.filter(c => c.type === 'resistor')
    const totalConductance = resistors.reduce((sum, r) => sum + (1 / r.resistance), 0)
    
    return targets.map((target, index) => {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π target –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Ä–µ–∑–∏—Å—Ç–æ—Ä
      const targetResistor = resistors[index % resistors.length]
      const conductance = targetResistor ? (1 / targetResistor.resistance) : 0.001
      
      const energyFraction = totalConductance > 0 ? conductance / totalConductance : 1 / targets.length
      const rawEnergy = source.energy_output * energyFraction
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 20-40%)
      const lossRate = 0.2 + Math.random() * 0.2 // 20-40% –ø–æ—Ç–µ—Ä–∏
      const deliveredEnergy = rawEnergy * (1 - lossRate)
      
      return {
        targetId: target.id,
        deliveredEnergy,
        pathResistance: targetResistor?.resistance || 470,
        pathLosses: rawEnergy - deliveredEnergy
      }
    })
  }
  
  /**
   * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
   */
  private calculateOptimalSweetSpot(deliveredEnergy: number): [number, number] {
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω ¬±15% –æ—Ç —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ optimal solution –ø–æ–ø–∞–¥–µ—Ç –≤ Sweet Spot
    
    const marginPercentage = 0.15 // ¬±15%
    const margin = deliveredEnergy * marginPercentage
    
    const lowerBound = Math.max(0, deliveredEnergy - margin)
    const upperBound = deliveredEnergy + margin
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    return [
      Math.round(lowerBound * 10) / 10,
      Math.round(upperBound * 10) / 10
    ]
  }
  
  /**
   * –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ target
   */
  private calculateImprovementFactor(
    originalRange: [number, number], 
    correctedRange: [number, number], 
    deliveredEnergy: number
  ): number {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ delivered energy –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    const wasInOriginal = deliveredEnergy >= originalRange[0] && deliveredEnergy <= originalRange[1]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞)
    const isInCorrected = deliveredEnergy >= correctedRange[0] && deliveredEnergy <= correctedRange[1]
    
    if (wasInOriginal && isInCorrected) {
      return 1.0 // –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    } else if (!wasInOriginal && isInCorrected) {
      return 100.0 // –ü–æ–ª–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ (0% ‚Üí 100%)
    } else {
      return 0.0 // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    }
  }
  
  /**
   * –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private calculateNewEnergyBalance(level: Level, correctedTargets: any[]): any {
    const sourceEnergy = level.circuit_definition.source.energy_output
    
    // –°—á–∏—Ç–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –≤ Sweet Spot (—Ç–µ–ø–µ—Ä—å –≤—Å–µ targets –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ)
    const totalUsefulEnergyInSweetSpot = correctedTargets.reduce((sum, target) => {
      return sum + target.deliveredEnergy
    }, 0)
    
    // –≠–Ω–µ—Ä–≥–∏—è –≤ Supercapacitor (–æ—Å—Ç–∞—Ç–æ–∫)
    const totalDelivered = totalUsefulEnergyInSweetSpot
    const supercapacitorEnergy = Math.max(0, sourceEnergy - totalDelivered)
    
    // –û–±—â–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
    const totalUsefulEnergy = totalUsefulEnergyInSweetSpot + supercapacitorEnergy
    
    // –ù–æ–≤—ã–π expected_score
    const newExpectedScore = sourceEnergy > 0 ? (totalUsefulEnergy / sourceEnergy) * 100 : 0
    
    return {
      sourceEnergy,
      totalDelivered,
      supercapacitorEnergy,
      newExpectedScore
    }
  }
  
  /**
   * –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
   */
  private calculateOverallImprovement(originalTargets: any[], correctedTargets: any[]): number {
    const totalImprovements = correctedTargets.reduce((sum, target) => {
      return sum + target.improvementFactor
    }, 0)
    
    const maxPossibleImprovement = correctedTargets.length * 100
    
    return maxPossibleImprovement > 0 ? (totalImprovements / maxPossibleImprovement) * 100 : 0
  }
  
  /**
   * –û—Ü–µ–Ω–∫–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
   */
  private estimatePathResistance(targetId: string, components: any[]): number {
    // –ò—â–µ–º —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    const resistors = components.filter(c => c.type === 'resistor')
    if (resistors.length === 0) return 470 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑–∏—Å—Ç–æ—Ä –∏–ª–∏ –ø–µ—Ä–≤—ã–π
    return resistors[0]?.resistance || 470
  }
  
  /**
   * –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ—Ä—å –≤ –ø—É—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
   */
  private estimatePathLosses(deliveredEnergy: number): number {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 20-40% –ø–æ—Ç–µ—Ä–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    return deliveredEnergy * (0.2 + Math.random() * 0.2)
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∫ —É—Ä–æ–≤–Ω—é
   */
  applyCorrectedSweetSpots(level: Level, generationResult: SweetSpotGenerationResult): Level {
    const correctedLevel = JSON.parse(JSON.stringify(level)) // Deep clone
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    for (const correctedTarget of generationResult.correctedTargets) {
      const target = correctedLevel.circuit_definition.targets.find(t => t.id === correctedTarget.id)
      if (target) {
        target.energy_range = correctedTarget.correctedRange
        console.log(`üîß SWEETSPOT_GENERATOR: –û–±–Ω–æ–≤–ª–µ–Ω Sweet Spot –¥–ª—è ${correctedTarget.id}: [${correctedTarget.correctedRange[0]}-${correctedTarget.correctedRange[1]}]`)
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º expected_score
    if (correctedLevel.solution_data?.optimal_solution) {
      correctedLevel.solution_data.optimal_solution.expected_score = generationResult.energyBalance.newExpectedScore
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    if (correctedLevel.solution_data?.validation_results) {
      correctedLevel.solution_data.validation_results.validation_performed = true
    }
    
    console.log(`‚úÖ SWEETSPOT_GENERATOR: –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–æ–≤—ã–π expected_score: ${generationResult.energyBalance.newExpectedScore.toFixed(1)}%`)
    
    return correctedLevel
  }
}