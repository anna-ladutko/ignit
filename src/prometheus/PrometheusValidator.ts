/**
 * PrometheusValidator
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Prometheus Studio
 * –í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

import type { Level } from '../types'

export interface PrometheusValidationResult {
  isValid: boolean
  errors: string[]
  warnings: string[]
  suggestions: string[]
  energyAnalysis: EnergyAnalysis
}

export interface EnergyAnalysis {
  sourceEnergy: number
  totalMaxDemand: number
  energyBalance: number
  pathAnalysis: PathAnalysis[]
  sweetSpotIssues: SweetSpotIssue[]
}

export interface PathAnalysis {
  targetId: string
  deliveredEnergy: number
  sweetSpotRange: [number, number]
  isInSweetSpot: boolean
  resistance: number
  losses: number
}

export interface SweetSpotIssue {
  targetId: string
  deliveredEnergy: number
  sweetSpotRange: [number, number]
  suggestedRange: [number, number]
  severity: 'critical' | 'warning'
}

export class PrometheusValidator {
  /**
   * –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Prometheus
   */
  validateLevel(level: Level): PrometheusValidationResult {
    console.log(`üîç PROMETHEUS_VALIDATOR: –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è ${level.metadata.level_id}`)

    const result: PrometheusValidationResult = {
      isValid: true,
      errors: [],
      warnings: [],
      suggestions: [],
      energyAnalysis: this.analyzeEnergyDistribution(level)
    }

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º expected_score
    this.validateExpectedScore(level, result)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º validation_performed
    this.validateValidationStatus(level, result)

    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    this.validateSweetSpotRanges(level, result)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å
    this.validateEnergyBalance(level, result)

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º optimal solution
    this.validateOptimalSolution(level, result)

    result.isValid = result.errors.length === 0

    console.log(`üìä PROMETHEUS_VALIDATOR: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - ${result.isValid ? 'PASSED' : 'FAILED'}`)
    console.log(`   –û—à–∏–±–∫–∏: ${result.errors.length}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.warnings.length}`)

    return result
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ —É—Ä–æ–≤–Ω–µ
   */
  private analyzeEnergyDistribution(level: Level): EnergyAnalysis {
    const sourceEnergy = level.circuit_definition.source.energy_output
    const targets = level.circuit_definition.targets
    const components = level.circuit_definition.available_components

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å –≤—Å–µ—Ö targets
    const totalMaxDemand = targets.reduce((sum, target) => {
      return sum + (target.energy_range ? target.energy_range[1] : 0)
    }, 0)

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
    const pathAnalysis: PathAnalysis[] = []
    const sweetSpotIssues: SweetSpotIssue[] = []

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ optimal solution –µ—Å–ª–∏ –µ—Å—Ç—å
    const optimalSolution = level.solution_data?.optimal_solution
    if (optimalSolution?.energy_distribution) {
      for (const target of targets) {
        const deliveredEnergy = optimalSolution.energy_distribution[target.id] || 0
        const sweetSpotRange = target.energy_range as [number, number]
        const isInSweetSpot = deliveredEnergy >= sweetSpotRange[0] && deliveredEnergy <= sweetSpotRange[1]

        pathAnalysis.push({
          targetId: target.id,
          deliveredEnergy,
          sweetSpotRange,
          isInSweetSpot,
          resistance: this.calculatePathResistance(target.id, components, optimalSolution),
          losses: this.calculatePathLosses(deliveredEnergy)
        })

        // –ï—Å–ª–∏ –Ω–µ –≤ Sweet Spot, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º—É
        if (!isInSweetSpot) {
          sweetSpotIssues.push({
            targetId: target.id,
            deliveredEnergy,
            sweetSpotRange,
            suggestedRange: this.calculateCorrectSweetSpot(deliveredEnergy),
            severity: 'critical'
          })
        }
      }
    }

    return {
      sourceEnergy,
      totalMaxDemand,
      energyBalance: sourceEnergy - totalMaxDemand,
      pathAnalysis,
      sweetSpotIssues
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ expected_score
   */
  private validateExpectedScore(level: Level, result: PrometheusValidationResult): void {
    const expectedScore = level.solution_data?.optimal_solution?.expected_score

    if (expectedScore === undefined || expectedScore === null) {
      result.errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç expected_score –≤ optimal_solution')
      return
    }

    // expected_score –±–ª–∏–∑–∫–æ –∫ –Ω—É–ª—é —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if (Math.abs(expectedScore) < 0.01) {
      result.errors.push(`expected_score —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π: ${expectedScore} (–±–ª–∏–∑–∫–æ –∫ 0)`)
      result.suggestions.push('Prometheus –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω—ã')
    }

    // expected_score –±–æ–ª—å—à–µ 100 –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–∏–∑–∏–∫—É
    if (expectedScore > 100) {
      result.errors.push(`expected_score –±–æ–ª—å—à–µ 100%: ${expectedScore}% (–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–∏)`)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private validateValidationStatus(level: Level, result: PrometheusValidationResult): void {
    const validationPerformed = level.solution_data?.validation_results?.validation_performed

    if (validationPerformed === false || validationPerformed === undefined) {
      result.warnings.push('validation_performed = false - Prometheus –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ')
      result.suggestions.push('–í–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ Prometheus Studio –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º')
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
   */
  private validateSweetSpotRanges(level: Level, result: PrometheusValidationResult): void {
    const { sweetSpotIssues } = result.energyAnalysis

    for (const issue of sweetSpotIssues) {
      result.errors.push(
        `Target ${issue.targetId}: —ç–Ω–µ—Ä–≥–∏—è ${issue.deliveredEnergy.toFixed(1)} EU –í–ù–ï Sweet Spot [${issue.sweetSpotRange[0].toFixed(1)}-${issue.sweetSpotRange[1].toFixed(1)}]`
      )
      
      result.suggestions.push(
        `–ò—Å–ø—Ä–∞–≤–∏—Ç—å Sweet Spot –¥–ª—è ${issue.targetId}: [${issue.suggestedRange[0].toFixed(1)}-${issue.suggestedRange[1].toFixed(1)}] EU`
      )
    }

    if (sweetSpotIssues.length === 0) {
      result.suggestions.push('‚úÖ –í—Å–µ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã')
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
   */
  private validateEnergyBalance(level: Level, result: PrometheusValidationResult): void {
    const { sourceEnergy, totalMaxDemand, energyBalance } = result.energyAnalysis

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫
    if (totalMaxDemand > sourceEnergy) {
      result.warnings.push(
        `–û–±—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å (${totalMaxDemand.toFixed(1)} EU) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ (${sourceEnergy} EU)`
      )
      result.suggestions.push('–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è puzzle-–¥–∏–∑–∞–π–Ω–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å')
    }

    // –û—à–∏–±–∫–∞ –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ–Ω
    if (energyBalance < -sourceEnergy * 0.5) {
      result.errors.push(
        `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å: –¥–µ—Ñ–∏—Ü–∏—Ç ${Math.abs(energyBalance).toFixed(1)} EU`
      )
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ optimal solution
   */
  private validateOptimalSolution(level: Level, result: PrometheusValidationResult): void {
    const optimalSolution = level.solution_data?.optimal_solution

    if (!optimalSolution) {
      result.errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç optimal_solution')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const availableComponentIds = level.circuit_definition.available_components.map(c => c.id)
    const usedComponents = optimalSolution.components_used || []

    for (const componentId of usedComponents) {
      if (!availableComponentIds.includes(componentId)) {
        result.errors.push(`Optimal solution –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentId}`)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ solution_result —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç expected_score
    const simulationResult = optimalSolution.simulation_result
    if (simulationResult) {
      const targetsCount = level.circuit_definition.targets.length
      const satisfiedCount = Object.values(simulationResult.targets_satisfied).filter(Boolean).length

      if (satisfiedCount === 0 && optimalSolution.expected_score > 0.01) {
        result.warnings.push('–ù–∏ –æ–¥–Ω–∞ —Ü–µ–ª—å –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞, –Ω–æ expected_score > 0')
      }
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   */
  private calculateCorrectSweetSpot(deliveredEnergy: number): [number, number] {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω ¬±15% –æ—Ç —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    const margin = deliveredEnergy * 0.15
    return [
      Math.max(0, deliveredEnergy - margin),
      deliveredEnergy + margin
    ]
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
   */
  private calculatePathResistance(targetId: string, components: any[], optimalSolution: any): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –∏—â–µ–º —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã –≤ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    return 470 // Placeholder
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ—Ä—å –≤ –ø—É—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
   */
  private calculatePathLosses(deliveredEnergy: number): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Ç–µ—Ä—å
    return deliveredEnergy * 0.2 // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 20% –ø–æ—Ç–µ—Ä–∏
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   */
  generateCorrectedLevel(originalLevel: Level, validationResult: PrometheusValidationResult): Level {
    const correctedLevel = JSON.parse(JSON.stringify(originalLevel)) // Deep clone

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    for (const issue of validationResult.energyAnalysis.sweetSpotIssues) {
      const target = correctedLevel.circuit_definition.targets.find(t => t.id === issue.targetId)
      if (target) {
        target.energy_range = issue.suggestedRange
        console.log(`üîß PROMETHEUS_VALIDATOR: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω Sweet Spot –¥–ª—è ${issue.targetId}: [${issue.suggestedRange[0].toFixed(1)}-${issue.suggestedRange[1].toFixed(1)}]`)
      }
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º expected_score
    const newExpectedScore = this.calculateCorrectExpectedScore(correctedLevel, validationResult)
    if (correctedLevel.solution_data?.optimal_solution) {
      correctedLevel.solution_data.optimal_solution.expected_score = newExpectedScore
    }

    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    if (correctedLevel.solution_data?.validation_results) {
      correctedLevel.solution_data.validation_results.validation_performed = true
    }

    return correctedLevel
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ expected_score
   */
  private calculateCorrectExpectedScore(level: Level, validationResult: PrometheusValidationResult): number {
    const { pathAnalysis, sourceEnergy } = validationResult.energyAnalysis

    let totalUsefulEnergy = 0

    // –°—á–∏—Ç–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –≤ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
    for (const path of pathAnalysis) {
      if (path.isInSweetSpot) {
        totalUsefulEnergy += path.deliveredEnergy
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –æ—Å—Ç–∞—é—â—É—é—Å—è –≤ Supercapacitor
    const totalDelivered = pathAnalysis.reduce((sum, path) => sum + path.deliveredEnergy, 0)
    const supercapacitorEnergy = Math.max(0, sourceEnergy - totalDelivered)
    totalUsefulEnergy += supercapacitorEnergy

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const efficiency = sourceEnergy > 0 ? (totalUsefulEnergy / sourceEnergy) * 100 : 0

    console.log(`üìä PROMETHEUS_VALIDATOR: –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${efficiency.toFixed(1)}%`)
    
    return efficiency
  }
}