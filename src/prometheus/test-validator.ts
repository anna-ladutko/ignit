/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PrometheusValidator –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
 */

import { PrometheusValidator } from './PrometheusValidator'
import type { Level } from '../types'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadLevel(order: number): Promise<Level> {
  const response = await fetch(`/levels/level-${order.toString().padStart(3, '0')}.json`)
  if (!response.ok) {
    throw new Error(`Failed to load level ${order}`)
  }
  return response.json()
}

export async function testPrometheusValidator() {
  console.log('üß™ PROMETHEUS_TEST: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞')
  
  const validator = new PrometheusValidator()
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
  const problemLevels = [1, 6, 8]
  
  for (const levelOrder of problemLevels) {
    try {
      console.log(`\nüìã PROMETHEUS_TEST: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å ${levelOrder}`)
      
      const level = await loadLevel(levelOrder)
      const result = validator.validateLevel(level)
      
      console.log(`üìä PROMETHEUS_TEST: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω—è ${levelOrder}:`)
      console.log(`   –í–∞–ª–∏–¥–Ω—ã–π: ${result.isValid}`)
      console.log(`   –û—à–∏–±–∫–∏: ${result.errors.length}`)
      console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.warnings.length}`)
      
      if (result.errors.length > 0) {
        console.log('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:')
        result.errors.forEach((error, i) => {
          console.log(`   ${i + 1}. ${error}`)
        })
      }
      
      if (result.warnings.length > 0) {
        console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:')
        result.warnings.forEach((warning, i) => {
          console.log(`   ${i + 1}. ${warning}`)
        })
      }
      
      if (result.suggestions.length > 0) {
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
        result.suggestions.forEach((suggestion, i) => {
          console.log(`   ${i + 1}. ${suggestion}`)
        })
      }
      
      // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
      if (!result.isValid) {
        console.log(`\nüîß PROMETHEUS_TEST: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —É—Ä–æ–≤–Ω—è ${levelOrder}`)
        const correctedLevel = validator.generateCorrectedLevel(level, result)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        const correctedResult = validator.validateLevel(correctedLevel)
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–ª–∏–¥–Ω—ã–π: ${correctedResult.isValid}`)
        
        if (correctedResult.isValid) {
          console.log(`üìà –ù–æ–≤—ã–π expected_score: ${correctedLevel.solution_data?.optimal_solution?.expected_score?.toFixed(1)}%`)
        }
      }
      
    } catch (error) {
      console.error(`‚ùå PROMETHEUS_TEST: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Ä–æ–≤–Ω—è ${levelOrder}:`, error)
    }
  }
  
  console.log('\nüéØ PROMETHEUS_TEST: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Debug Panel
export function runPrometheusValidation(level: Level) {
  const validator = new PrometheusValidator()
  return validator.validateLevel(level)
}

export function generateCorrectedLevel(level: Level) {
  const validator = new PrometheusValidator()
  const validationResult = validator.validateLevel(level)
  
  if (!validationResult.isValid) {
    return validator.generateCorrectedLevel(level, validationResult)
  }
  
  return level // –£–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SweetSpotGenerator
export async function testSweetSpotGenerator() {
  console.log('üéØ SWEETSPOT_TEST: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Sweet Spot')
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å 008
    const level008 = await loadLevel(8)
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SweetSpotGenerator
    const { SweetSpotGenerator } = await import('./SweetSpotGenerator')
    const generator = new SweetSpotGenerator()
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ Sweet Spot –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const generationResult = generator.generateCorrectSweetSpots(level008)
    
    console.log('üìä SWEETSPOT_TEST: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è 008:')
    console.log('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ targets:')
    generationResult.originalTargets.forEach(target => {
      console.log(`  ${target.id}: [${target.originalRange[0].toFixed(1)}-${target.originalRange[1].toFixed(1)}] EU, –ø–æ–ª—É—á–∞–µ—Ç ${target.deliveredEnergy.toFixed(1)} EU`)
    })
    
    console.log('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ targets:')
    generationResult.correctedTargets.forEach(target => {
      console.log(`  ${target.id}: [${target.correctedRange[0].toFixed(1)}-${target.correctedRange[1].toFixed(1)}] EU, —É–ª—É—á—à–µ–Ω–∏–µ ${target.improvementFactor.toFixed(1)}%`)
    })
    
    console.log(`–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: ${generationResult.overallImprovement.toFixed(1)}%`)
    console.log(`–ù–æ–≤—ã–π expected_score: ${generationResult.energyBalance.newExpectedScore.toFixed(1)}%`)
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const correctedLevel = generator.applyCorrectedSweetSpots(level008, generationResult)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    const validator = new PrometheusValidator()
    const correctedValidation = validator.validateLevel(correctedLevel)
    
    console.log(`‚úÖ SWEETSPOT_TEST: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–ª–∏–¥–Ω—ã–π: ${correctedValidation.isValid}`)
    console.log(`   –û—à–∏–±–∫–∏: ${correctedValidation.errors.length}`)
    console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${correctedValidation.warnings.length}`)
    
    return {
      generationResult,
      correctedLevel,
      validationResult: correctedValidation
    }
    
  } catch (error) {
    console.error('‚ùå SWEETSPOT_TEST: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
    throw error
  }
}